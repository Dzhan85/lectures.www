Маршруты
========

.. seealso::

   * http://restas.lisper.ru/ru/manual/routes.html

.. figure:: /_static/web/routes4.jpg
   :align: left
   :figwidth: 200px

   Рис.1 Сортировочная станция

Идея маршрута (англ. - route) впервые появилась в |rails|_ и быстро обрела популярность в других веб-фреймворках. Также, концептуально очень близкой системой, является `URLConf <http://docs.djangoproject.com/en/dev/topics/http/urls/>`_ в `Django <http://www.djangoproject.com/>`_. В последующих разработках наиболее мощной реализацией данной идеи, вероятно, является http://routes.groovie.org/, используемая в `Pylons <http://docs.pylonsproject.org/en/latest/>`_.

Маршруты отвечают за ключевую проблему веб-разработки: сопоставление кода и URL. Например, какой код должен отвечать за обработку запросов по адресу "/blog/2008/01/08" или "/login"? Во многих фреймворках используется фиксированная система диспетчеризации, например "/A/B/C" означает прочитать файл "C" в каталоге "B" (например ``/auth/login.php`` или ``/cgi-bin/hello.cgi``), или вызвать метод "С" класса "B" в модуле "A". Это работает прекрасно до тех пор, пока не возникает необходимости в реорганизации кода, и выясняется, что закладки пользователей стали недействительны. Кроме того, если вы хотите переделать адреса (например, создать раздел в подразделе), то нужно изменить уже отлаженную логику по генерации ссылок внутри сайта.

Маршруты предлагают иной подход. Вы определяете шаблоны URL и связываете их со своим кодом. Если вы измените свое решение по поводу конкретного URL, то просто поменяйте шаблон URL - код по-прежнему будет работать отлично и не понадобится менять какую-либо логику.

.. raw:: html

   <br clear="both"/>

Сопоставление с образом
-----------------------

.. seealso::

   * `Сопоставление с образом <https://ru.wikipedia.org/wiki/Сопоставление_с_образцом>`_
   * `Ryby on Rails -> Routes <http://guides.rubyonrails.org/routing.html>`_
   * `Python -> Routes <https://routes.readthedocs.org/en/latest/>`_

`Регулярные выражения` дают огромные возможности для обработки URL-путей, но из-за ограничений описанных в стандарте `RFC 1738 <https://tools.ietf.org/html/rfc1738>`_, большинство из них не нужны, при этом использование `регулярных выражений` затрудняет читабельность кода. Более современный подход, придуманный |rails|_, использовать технологию `сопостовление с образом`. Рассмотрим отличия, на примере нашего блога:

.. links
.. |rails| replace:: Ruby on Rails
.. _rails: http://rubyonrails.org/
