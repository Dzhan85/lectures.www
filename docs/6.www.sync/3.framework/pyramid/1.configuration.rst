Конфигурация
============

Как и обычный список настроек, конфигуратор инициализирует начальные значения
(либо из файла "\*.ini", либо через параметры класса). Отличительной особенностью
конфигуратора является то, что по мере выполнения программы настройки могут
меняться или добавляться.

В :l:`Pyramid` существует 2 способа настройки приложений Императивный и
Декларативный.

Императивный способ конфигурации
--------------------------------

Императивный способ конфигурации означает что команды языка Python будут
выполнены одна за другой, последовательно. Ниже пример простого приложения на
Пирамиде сконфигурированного императивно.

.. code-block:: python
   :linenos:
   :emphasize-lines: 9-11

   from wsgiref.simple_server import make_server
   from pyramid.config import Configurator
   from pyramid.response import Response

   def hello_world(request):
       return Response('Hello world!')

   if __name__ == '__main__':
       config = Configurator()
       config.add_view(hello_world)
       app = config.make_wsgi_app()
       server = make_server('0.0.0.0', 8080, app)
       server.serve_forever()

Декларативный способ конфигурации
---------------------------------

Иногда бывает сложно выполнить все настройки императивно в одном месте, т.к. приложение обычно состоит из множества файлов. В таком случае, вам придется постоянно перескакивать между файлами, что бы посмотреть настройки для блока кода из другого файла. Что бы этого избежать, фреймворк :l:`Pyramid` позволяет настраивать приложение декларативных способом (:term:`configuration decoration`), т.е. добавлять настройки как можно ближе к целевому коду, как показано в примере ниже:

.. code-block:: python
   :linenos:
   :emphasize-lines: 4

   from pyramid.response import Response
   from pyramid.view import view_config

   @view_config(name='hello', request_method='GET')
   def hello(request):
       return Response('Hello')

Сам по себе декоратор :class:`pyramid.view.view_config` не произведет ни какого
эффекта. Что бы приложение нашло и применило эти настройки нужно выполнить
метод :meth:`pyramid.config.Configurator.scan` (:term:`scan`). После выполнения
этот метод проходит по всем нижележащим файлам от текущей директории, ищет
декларативное описание настроек и применяет их к проекту.

.. code-block:: python
   :linenos:
   :emphasize-lines: 6,12

   from wsgiref.simple_server import make_server
   from pyramid.config import Configurator
   from pyramid.response import Response
   from pyramid.view import view_config

   @view_config()
   def hello(request):
       return Response('Hello')

   if __name__ == '__main__':
       config = Configurator()
       config.scan()
       app = config.make_wsgi_app()
       server = make_server('0.0.0.0', 8080, app)
       server.serve_forever()

В примере выше декоратор :class:`~pyramid.view.view_config` делает то же что
метод :meth:`pyramid.config.Configurator.add_view` но более наглядно:

.. code-block:: python

   config.add_view(hello)

Резюме
------

Вы можете выбрать любой способ конфигурации, который вам понравится.
Оба способа полностью эквивалентны и часто используются совместно, решая разные
задачи конфигурации приложения более удобным способом.
