Безопасность
============

.. seealso::

   * http://docs.pylonsproject.org/projects/pyramid/en/latest/narr/security.html
   * http://pyramid-cookbook.readthedocs.org/en/latest/pylons/auth.html
   * http://michael.merickel.org/projects/pyramid_auth_demo/

   Видео:

   * https://skillsmatter.com/skillscasts/4536-back-to-school-and-talks

Аутентификация vs Авторизация
-----------------------------

.. seealso::

   * `Аутентификация в Интернете <https://ru.wikipedia.org/wiki/Аутентификация_в_Интернете>`_
   * `Авторизация <https://ru.wikipedia.org/wiki/Авторизация>`_

В пирамиде система безопасности поделена на 2 части. Первая это аутентификация,
которая производит идентификацию пользователя, его проверку (например что он
есть в БД и он не заблокирован) и определяет какими правами он наделен. Второе
это авторизация, система которая проверяет имеет ли этот пользователь доступ к
запрошенному ресурсу.

Кто ты?
~~~~~~~

.. note::

   Фреймворк :l:`Repoze.bfg` имеет расширение `repoze.who
   <http://repozewho.readthedocs.org/en/latest/>`_, которое отвечает за
   идентификацию и аутентификацию пользователя.

   `Who?` т.е. `Кто?` ты.

   Для авторизации используется расширение `repoze.what
   <http://what.repoze.org/docs/1.0>`_, которое проверяет какие ресурсы тебе
   доступны.

   `What?` т.е. `Что?` доступно тебе.

   Несмотря на то, что фреймворк :l:`Pyramid` это по сути переименованный
   :l:`repoze.bfg`, в нем есть собственный механизм авторизации и аутентификации
   из коробки.

Определение текущего пользователя при поступлении HTTP запроса, это задача
аутентификации (:term:`authentication policy`). Производится она в 3 этапа:

#. Идентифицируем пользователя путем проверки токенов/заголовков/итд в HTTP
   запросе. (см. :attr:`pyramid.request.Request.unauthenticated_userid`)

   Например: ищем ``auth_token`` в куках запроса, проверяем что токен правильно
   подписан, и возвращаем ``id`` пользователя.
#. Подтверждаем статус идентифицированного пользователя. (``authenticated_userid``)

   Например: проверяем что ``id`` этого пользователя все еще в базе данных и
   пользователь еще активен. Пользователя могли удалить из БД, но при этом
   в куках браузера хранится валидный токен ``auth_token``.
#. Ищем права (:term:`principal`) которые принадлежат пользователю и добавляем
   их в список. (``effective_principals``)

   Например: берем из БД группы пользователя и добавляем в список. Для текущего
   идентифицированного пользователя это может быть: "vasya", "user_admin",
   "editor".

Что тебе дозволенно?
~~~~~~~~~~~~~~~~~~~~

