Безопасность
============

.. seealso::

   * http://docs.pylonsproject.org/projects/pyramid/en/latest/narr/security.html
   * http://pyramid-cookbook.readthedocs.org/en/latest/pylons/auth.html
   * http://michael.merickel.org/projects/pyramid_auth_demo/

   Видео:

   * https://skillsmatter.com/skillscasts/4536-back-to-school-and-talks

Аутентификация vs Авторизация
-----------------------------

.. seealso::

   * `Аутентификация в Интернете <https://ru.wikipedia.org/wiki/Аутентификация_в_Интернете>`_
   * `Авторизация <https://ru.wikipedia.org/wiki/Авторизация>`_

В пирамиде система безопасности поделена на 2 части. Первая это аутентификация,
которая производит идентификацию пользователя, его проверку (например что он
есть в БД и он не заблокирован) и определяет какими правами он наделен. Второе
это авторизация, система которая проверяет имеет ли этот пользователь доступ к
запрошенному ресурсу.

.. todo::

   см. исходник

   .. Pyramid provides an optional declarative authorization system that can prevent a view from being invoked based on an authorization policy. Before a view is invoked, the authorization system can use the credentials in the request along with the context resource to determine if access will be allowed. Here's how it works at a high level:
   ..
   ..     A request is generated when a user visits the application.
   ..     Based on the request, a context resource is located through resource location. A context is located differently depending on whether the application uses traversal or URL dispatch, but a context is ultimately found in either case. See the URL Dispatch chapter for more information.
   ..     A view callable is located by view lookup using the context as well as other attributes of the request.
   ..     If an authentication policy is in effect, it is passed the request; it returns some number of principal identifiers.
   ..     If an authorization policy is in effect and the view configuration associated with the view callable that was found has a permission associated with it, the authorization policy is passed the context, some number of principal identifiers returned by the authentication policy, and the permission associated with the view; it will allow or deny access.
   ..     If the authorization policy allows access, the view callable is invoked.
   ..     If the authorization policy denies access, the view callable is not invoked; instead the forbidden view is invoked.
   ..
   .. Security in Pyramid, unlike many systems, cleanly and explicitly separates authentication and authorization. Authentication is merely the mechanism by which credentials provided in the request are resolved to one or more principal identifiers. These identifiers represent the users and groups in effect during the request. Authorization then determines access based on the principal identifiers, the view callable being invoked, and the context resource.
   ..
   .. Authorization is enabled by modifying your application to include an authentication policy and authorization policy. Pyramid comes with a variety of implementations of these policies. To provide maximal flexibility, Pyramid also allows you to create custom authentication policies and authorization policies.

Кто ты?
~~~~~~~

.. note::

   Фреймворк :l:`Repoze.bfg` имеет расширение `repoze.who
   <http://repozewho.readthedocs.org/en/latest/>`_, которое отвечает за
   идентификацию и аутентификацию пользователя.

   `Who?` т.е. `Кто?` ты.

   Для авторизации используется расширение `repoze.what
   <http://what.repoze.org/docs/1.0>`_, которое проверяет какие ресурсы тебе
   доступны.

   `What?` т.е. `Что?` доступно тебе.

   Несмотря на то, что фреймворк :l:`Pyramid` это по сути переименованный
   :l:`repoze.bfg`, в нем есть собственный механизм авторизации и аутентификации
   из коробки.

Определение текущего пользователя при поступлении HTTP запроса, это задача
аутентификации (:term:`authentication policy`). Производится она в 3 этапа:

#. Идентифицируем пользователя путем проверки токенов/заголовков/итд в HTTP
   запросе. (см. :attr:`pyramid.request.Request.unauthenticated_userid`)

   Например: ищем ``auth_token`` в куках запроса, проверяем что токен правильно
   подписан, и возвращаем ``id`` пользователя.
#. Подтверждаем статус идентифицированного пользователя. (``authenticated_userid``)

   Например: проверяем что ``id`` этого пользователя все еще в базе данных и
   пользователь еще активен. Пользователя могли удалить из БД, но при этом
   в куках браузера хранится валидный токен ``auth_token``.
#. Ищем группы (:term:`principal`) которые принадлежат пользователю и добавляем
   их в список. (``effective_principals``)

   Например: берем из БД группы пользователя и добавляем в список. Для текущего
   идентифицированного пользователя это может быть: "vasya", "user_admin",
   "editor".

Что тебе дозволенно?
~~~~~~~~~~~~~~~~~~~~

Каждый ресурс пирамиды может быть защищен правами доступа
(:term:`permission`). Задача авторизации определение того, какие пользователи
имеют доступ к ресурсам.

После аутентификации создается список групп пользователя (:term:`principal`).
Политика авторизации (:term:`authorization policy`) запрещает или разрешает
доступ к ресурсу на основании этого списка групп, сверяя его с правами ресурса.

Добавление авторизации в проект
-------------------------------

.. seealso::

   * :mod:`pyramid.authorization`
   * :mod:`pyramid.authentication`

В пирамиде по умолчанию авторизация отключена. Все представления (``views``)
полностью доступны анонимным пользователям. Для того что бы их защитить нужно
добавить в настройки политику безопасности.

Для включения политики авторизации используется метод конфигуратора
:meth:`pyramid.config.Configurator.set_authorization_policy`. Для
аутентификации :meth:`pyramid.config.Configurator.set_authentication_policy`
соответственно. Так-как авторизация не может существовать без аутентификации,
необходимо указывать обе политики в проекте.

.. code-block:: python

   from pyramid.config import Configurator
   from pyramid.authentication import AuthTktAuthenticationPolicy
   from pyramid.authorization import ACLAuthorizationPolicy

   authn_policy = AuthTktAuthenticationPolicy('seekrit', hashalg='sha512')
   authz_policy = ACLAuthorizationPolicy()

   config = Configurator()
   config.set_authentication_policy(authn_policy)
   config.set_authorization_policy(authz_policy)

Здесь :class:`pyramid.authentication.AuthTktAuthenticationPolicy` это механизм
аутентификации пользователя, который ищет его из "auth ticket" cookie.
:class:`pyramid.authorization.ACLAuthorizationPolicy` механизм авторизации
по аксесс листам (:term:`ACL`).

Права доступа для `View`
------------------------

Императивно:

.. code-block:: python
   :emphasize-lines: 3

   config.add_view('mypackage.views.blog_entry_add_view',
                   name='add_entry.html',
                   permission='add')

Декларативно:

.. code-block:: python
   :emphasize-lines: 4

   from pyramid.view import view_config
   from resources import Blog

   @view_config(name='add_entry.html', permission='add')
   def blog_entry_add_view(request):
       """ Add blog entry code goes here """
       # ...

Права доступа по умолчанию
--------------------------

Если ресурсу не присвоены права доступа, то используются права по умолчанию.
В пирамиде права по умолчанию (:attr:`pyramid.security.NO_PERMISSION_REQUIRED`)
подразумевают что ресурсы доступны всем, даже анонимным пользователям.

Это поведение возможно изменить при помощи метода
:meth:`pyramid.config.Configurator.set_default_permission()`.

.. code-block:: python

   config.set_default_permission('my_default_permission')

Аксесс листы (ACL)
------------------

.. seealso::

   * https://ru.wikipedia.org/wiki/ACL

Access Control List или :term:`ACL` — список контроля доступа, который
определяет, кто или что может получать доступ к конкретному объекту, и какие
именно операции разрешено или запрещено этому субъекту проводить над объектом.

В пирамиде аксесс лист это список содержащий записи, определяющие права
индивидуального пользователя или группы на ресурсы проекта. Элементы ACL также
еще называют Access Control Entry или :term:`ACE`.

Например:

.. code-block:: python

   from pyramid.security import Allow
   from pyramid.security import Everyone

   __acl__ = [
       (Deny, 'vasya', 'move'),
       (Deny, 'group:blacklist', ('add', 'delete', 'edit')),

       (Allow, Everyone, 'view'),
       (Allow, 'group:editors', ('add', 'edit')),
       (Allow, 'group:editors', 'move'),
       (Allow, 'group:deleter', 'delete'),
   ]

``__acl__`` из примера выше, это список контроля доступа (:term:`ACL`).

``(Allow, Everyone, 'delete')`` это :term:`ACE`, т.е. запись в :term:`ACL`.

#. Первый элемент в списке :term:`ACE` это действие, т.е. "что делать?"
   разрешить или запретить. Действия представляются константами
   :attr:`pyramid.security.Allow` и :attr:`pyramid.security.Deny`.
#. Второй элемент списка это группы к которым принадлежит пользователь
   (:term:`principals`).
#. Последний элемент это права или список прав.

Также существую специальные группы (:term:`principals`):

* :attr:`pyramid.security.Everyone` - для всех.
* :attr:`pyramid.security.Authenticated` - для аутентифицированнных
  пользователей.

Если мы захотим запретить все, кроме тех :term:`ACE` которые в списке, мы можем
написать это так:

.. code-block:: python
   :emphasize-lines: 5

   from pyramid.security import Allow
   from pyramid.security import ALL_PERMISSIONS

   __acl__ = [(Allow, 'fred', 'view'),
              (Deny, Everyone, ALL_PERMISSIONS)]

или воспользоваться встроенным в пирамиду :term:`ACE`:

.. code-block:: python
   :emphasize-lines: 5

   from pyramid.security import Allow
   from pyramid.security import DENY_ALL

   __acl__ = [(Allow, 'fred', 'view'),
              DENY_ALL]

ACL для ресурса
---------------

.. todo::

   * написать вначале, что такое ресурсы.

ACL для роутов
--------------

.. literalinclude:: /../sourcecode/6.www.sync/3.framework/pyramid/auth_route_factory.py
   :language: python
   :emphasize-lines: 11-17, 32, 35
   :linenos:

Глобальный ACL
--------------

.. seealso::

   * http://docs.pylonsproject.org/projects/pyramid/en/latest/tutorials/wiki2/authorization.html

.. literalinclude:: /../sourcecode/6.www.sync/3.framework/pyramid/auth_root_factory.py
   :language: python
   :emphasize-lines: 11-17, 27, 34
   :linenos:

Логин & Логаут
--------------

.. literalinclude:: /../sourcecode/6.www.sync/3.framework/pyramid/auth_with_login.py
   :language: python
   :emphasize-lines: 24-27,30-33,50-53
   :linenos:

.. todo::

   * Добавить пример с формами
   * Добавить ziggurat
   * Написать резюме

Basic Auth
----------

.. seealso::

   * https://gist.github.com/inklesspen/48cf6f3c7baa21df7839

.. code-block:: python

   from __future__ import absolute_import

   from waitress import serve
   from pyramid.config import Configurator
   from pyramid.response import Response
   from paste.httpheaders import WWW_AUTHENTICATE, AUTHORIZATION
   from pyramid.security import Authenticated, Allow, Everyone
   from pyramid.authorization import ACLAuthorizationPolicy


   class Root(object):
       __acl__ = [
           (Allow, Authenticated, 'view'),
       ]

       def __init__(self, request):
           self.request = request


   def checkauth(username, password):
       return username == 'pyramid' and password == 'aliens'


   class BasicAuthenticationPolicy(object):
       def authenticated_userid(self, request):
           authorization = AUTHORIZATION(request.environ)
           if not authorization:
               return None
           (authmeth, auth) = authorization.split(' ', 1)
           if 'basic' != authmeth.lower():
               return None
           auth = auth.strip().decode('base64')
           username, password = auth.split(':', 1)
           if not checkauth(username, password):
               return None
           return username

       def effective_principals(self, request):
           ep = [Everyone]
           username = self.authenticated_userid(request)
           if username is not None:
               ep.append(Authenticated)
               ep.append(username)
               ep.append('g:admin')
           return ep

       def unauthenticated_userid(self, request):
           authorization = AUTHORIZATION(request.environ)
           if not authorization:
               return None
           (authmeth, auth) = authorization.split(' ', 1)
           if 'basic' != authmeth.lower():
               return None
           auth = auth.strip().decode('base64')
           username, password = auth.split(':', 1)
           return username

       def remember(self, request, principal, **kw):
           return []

       def forget(self, request):
           return []


   def forbidden_view(request):
       head = WWW_AUTHENTICATE.tuples('Basic realm="%s"' % 'fnord')
       return Response('Not Authorized', status='401 Not Authorized', headers=head)


   def hello_world(request):
       return Response('Hello {!r}!'.format(request.effective_principals))

   if __name__ == '__main__':
       config = Configurator(root_factory=Root)
       config.add_route('hello', '/hello')
       config.add_view(hello_world, route_name='hello', permission='view')
       config.set_authentication_policy(BasicAuthenticationPolicy())
       config.set_authorization_policy(ACLAuthorizationPolicy())
       config.add_forbidden_view(forbidden_view)
       app = config.make_wsgi_app()
       serve(app, host='0.0.0.0', port=8080)
