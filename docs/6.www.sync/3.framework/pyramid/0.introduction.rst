Введение
========

.. image:: /_static/vector/Pyramid_Logo.*

На создание :l:`Pyramid` оказали влияние такие фреймворки, как :l:`Zope`,
:l:`Pylons` и :l:`Django`. Код Pyramid разрабатывался в проекте
:l:`repoze.bfg`, а название поменялось в результате слияния проектов BFG и
Pylons, по решению встречи разработчиков в отеле `Luxor
<https://www.luxor.com/en.html>`_ (который имеет форму пирамиды, откуда и пошло
название фреймворка) в Лас-Вегасе, в 2010 году.

.. seealso::

    * https://trypyramid.com
    * `awesome-pyramid <https://github.com/uralbash/awesome-pyramid/>`_
    * **EN** - |IRC Freenode|
    * **RU** - |IRC Freenode RU|

    .. |IRC Freenode| image:: /_static/vector/irc-freenode-blue.svg
       :target: https://webchat.freenode.net/?channels=pyramid

    .. |IRC Freenode RU| image:: /_static/vector/irc-freenode-blue.svg
       :target: https://webchat.freenode.net/?channels=pyramid-ru

Пирамида самый молодой фреймворк для синхронного Веба, среди популярных
`Python` фреймворков. Разработчики из сообщества `Pylons
<http://pylonsproject.org/>`_ не стали развивать тупиковую ветвь каркасных
фреймворков с жестко заданной архитектурой, к которым относятся :l:`Pylons` и
например :l:`Ruby On Rails`, поняли ошибки монолитных, тяжелых фреймворков типа
:l:`Zope` или :l:`Django` и создали минималистичный, очень гибкий, но в то же
время легко расширяемый фреймворк, сконцентрировав свои усилия на основных
задачах фреймворка, это обработка маршрутов, простой и расширяемый конфиг,
система событий и `middleware` (tweens), простая система авторизации
построенная на `ACL`, возможность задания маршрутов динамически в виде
бинарного дерева и привязки их к ресурсам. Всеми остальными задачами занимаются
сторонние библиотеки, по требованию программиста, можно выбрать любой ``ORM``
для работы с БД, любой шаблонизатор, придумать любую схему авторизации и прочее.

Такой подход не ограничивает программиста в архитектуре проекта, в выборе
инструментов и не заставляет для решения узких задач тянуть множество не нужных
зависимостей и функционала.

Установка
---------

.. seealso::

   * http://docs.pylonsproject.org/projects/pyramid/en/latest/narr/install.html
   * http://docs.pylonsproject.org/projects/pyramid/en/1.6-branch/narr/firstapp.html
   * http://docs.pylonsproject.org/projects/pyramid/en/latest/quick_tour.html

Обычно, достаточно выполнить:

.. code-block:: bash

   pip install pyramid

Hello World
-----------

.. literalinclude:: /../sourcecode/6.www.sync/3.framework/pyramid/intro/helloworld.py
   :language: python
   :caption: helloworld.py - Pyramid приложение в одном файле
   :linenos:

Сохраните код в файл ``helloworld.py`` и запустите его (``python
helloworld.py``). Теперь приложение доступно на 8000 порту. По адресу
http://localhost:8000/ отобразится "Hello World".

Так просто, в одном файле,
запустить Веб приложение не получится ни в `Django`, ни в `Zope`, это можно
сравнить разве что с `WSGI` приложением или минималистичным фреймворком
:l:`Bottle`, который сильно уступает пирамиде по возможностям масштабирования.

Импорты
~~~~~~~

.. literalinclude:: /../sourcecode/6.www.sync/3.framework/pyramid/intro/helloworld.py
   :language: python
   :caption: helloworld.py - импортированные модули
   :lines: 1-3

Pyramid приложение начинается с конфига, который создается при помощи класса
:class:`~pyramid.config.Configurator` из модуля :mod:`pyramid.config`.
В дальнейшем экземпляр класса :class:`~pyramid.config.Configurator`
используется для настройки.

Как и многие другие Веб-фреймворки на Python, Pyramid использует :term:`WSGI`
протокол для связи приложения и веб-сервера. В этом примере выбран
Веб-сервер :mod:`wsgiref`, для удобства, т.к. он встроен в Python.

:class:`pyramid.response.Response` копия класса :class:`~webob.response.Response`
из библиотеки :l:`webob`. Используется для формирования HTTP ответа.

View
~~~~

.. literalinclude:: /../sourcecode/6.www.sync/3.framework/pyramid/intro/helloworld.py
   :language: python
   :caption: helloworld.py - функция hello
   :pyobject: hello

Такой тип представления в Pyramid называется :term:`view callable`, принимает в
качестве аргумента объект класса :class:`pyramid.request.Request` (который
наследуется от :class:`webob.request.BaseRequest`) и возвращает объект HTTP
ответа :class:`pyramid.response.Response`.

Конфигурация
~~~~~~~~~~~~

.. literalinclude:: /../sourcecode/6.www.sync/3.framework/pyramid/intro/helloworld.py
   :language: python
   :dedent: 4
   :caption: Создаем конфигуратор приложения
   :lines: 10

.. literalinclude:: /../sourcecode/6.www.sync/3.framework/pyramid/intro/helloworld.py
   :language: python
   :dedent: 4
   :linenos:
   :lines: 11,12

В первой строчке вызывается метод конфигуратора
:meth:`pyramid.config.Configurator.add_route`, который регистрирует новый
маршрут (:term:`route`) с названием "hello_world" и привязывает его к корневому
пути сайта "/".

Вторая строка регистрирует функцию ``hello(request)`` как :term:`view callable`
и привязывает ее к маршруту "hello_world". Теперь при обращении по URL адресу
http://localhost:8000/ будет запускаться функция ``hello`` с переданным ей
объектом запроса ``request``.

WSGI приложение
~~~~~~~~~~~~~~~

.. literalinclude:: /../sourcecode/6.www.sync/3.framework/pyramid/intro/helloworld.py
   :language: python
   :dedent: 4
   :linenos:
   :lines: 13

Метод :meth:`pyramid.config.Configurator.make_wsgi_app` формирует :term:`WSGI`
приложение из информации которая хранится в конфигураторе. В дальнейшем,
благодаря спецификации `WSGI` (:pep:`333`), можно запустить это приложение на
любом совместимом Веб-сервере.

WSGI сервер
~~~~~~~~~~~

.. literalinclude:: /../sourcecode/6.www.sync/3.framework/pyramid/intro/helloworld.py
   :language: python
   :dedent: 4
   :linenos:
   :lines: 14,15

WSGI-сервер :mod:`wsgiref` принимает первым параметром адрес '0.0.0.0'
(доступен извне, в отличие от '127.0.0.1' по умолчанию), вторым порт '8000',
третий параметр это  WSGI-приложение, в пирамиде конечное приложение является
объектом класса :class:`pyramid.router.Router` (:term:`Router`).

Функция ``serve_forever`` запускает WSGI приложение.

Резюме
~~~~~~

Мы написали очень простое Веб-приложение используя :l:`Pyramid` фреймворк и
настроив его императивно, это означает что настройки были прописаны напрямую в
объект конфигуратора (класс :class:`pyramid.config.Configurator`).
