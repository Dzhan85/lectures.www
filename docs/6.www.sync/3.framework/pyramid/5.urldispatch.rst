Диспетчеризация URL
===================

.. todo::

   * Расписать более подробно
     + http://blog.delaguardia.com.mx/pyramid-view-configuration-let-me-count-the-ways.html

.. seealso::

   * http://docs.pylonsproject.org/projects/pyramid/en/1.6-branch/narr/urldispatch.html
   * http://pyramid-cookbook.readthedocs.org/en/latest/routing/index.html
   * `Для тех кто в Djang'е
     (http://blog.delaguardia.com.mx/pyramid-view-configuration-let-me-count-the-ways.html)
     <http://blog.delaguardia.com.mx/pyramid-view-configuration-let-me-count-the-ways.html>`_

Каждый поступающий на сервер приложений Pyramid запрос (**request**) должен
найти вид (**view**), который и будет его обрабатывать.

В Pyramid имеется два базовых подхода к поиску нужного вида для обрабатываемого
запроса: на основе сопоставления (**matching**), как в большинстве подобных
фреймворков, и обхода (**traversal**), как в :l:`Zope`. Кроме того, в одном
приложении можно с успехом сочетать оба подхода.

Pattern Matching
----------------

Простейший пример с заданием маршрута (заимствован из документации):

.. code-block:: python

   # Здесь config - экземпляр pyramid.config.Configurator
   config.add_route('idea', 'site/{id}')
   config.add_view('mypackage.views.site_view', route_name='idea')

Traversal
---------

.. seealso::

   * http://docs.pylonsproject.org/projects/pyramid/en/latest/narr/traversal.html

.. todo::

   * http://faq1c.gorbunov.ru/node/85
   * https://skillsmatter.com/skillscasts/4189-routing-traversal-and-url-dispatch

Использование обхода лучше проиллюстрировать на небольшом примере:

.. code-block:: python

   from wsgiref.simple_server import make_server
   from pyramid.config import Configurator
   from pyramid.response import Response

   # Класс некоторого ресурса
   class Resource(dict):
       pass

   # Дерево ресурсов (жёстко закодированное) в фабрике корня
   def get_root(request):
       return Resource({'a': Resource({'b': Resource({'c': Resource()})})})

   # Вид-для-вызова, который умеет показывать ресурс Resource (в context)
   def hello_world_of_resources(context, request):
       output = "Ресурс и его дети: %s" % context
       return Response(output)

   if __name__ == '__main__':
       config = Configurator(root_factory=get_root)
       config.add_view(hello_world_of_resources, context=Resource)
       app = config.make_wsgi_app()
       server = make_server('0.0.0.0', 8080, app)
       server.serve_forever()

В этом примере иерархия для обхода жестко задана в методе ``get_root`` с
помощью вложенных словарей, тогда как реальные приложения должны сами
определять необходимый доступ по ключам (метод ``__getitem__`` помогает
организовать такой доступ). В коде также присутствует корневая фабрика, с
которой собственно и начинается обход узлов (node) дерева ресурсов.
Вид-для-вызова (:term:`view callable`) представлен функцией
``hello_world_of_resources``. Говоря несколько упрощённо, на основе URL запроса
в результате обхода иерархии Pyramid находит ресурс и применяет к нему
«наилучший» вид-для-вызова (в нашем примере — он единственный).

Обход словаря
~~~~~~~~~~~~~

.. warning::

   В примерах используется Python3

Метод обхода дерева (traversal), позволяет находить ресурсы во вложенных структурах.
Такой механизм хорошо применим для некоторых практических задач, например
список всех URL маршрутов сайта является деревом, в котором каждый конечный URL
это отдельная ветка дерева. Поэтому всю структуру сайта можно поместить в словарь.

К примеру, известно, что смерь сказочного персонажа "кащея" находится в яйце,
которое в свою очередь в утке, которая в зайце и т.д. В сумме получается
вложенная структура, которую можно описать так:

``остров -> дуб -> сундук -> заяц -> утка -> яйцо -> игла -> СмертьКощея``

Мы можем такую, плоскую, вложенную структуру легко представить в виде URL:

``http://localhost:8080/mytraversal/остров/дуб/сундук/заяц/утка/яйцо/игла``

А так-как любой URL является веткой дерева, то несложно описать это в Python:

.. code-block:: python3

   {
        'остров': {
            'дуб': {
                'сундук': {
                    'заяц': {
                        'утка': {
                            'яйцо': {
                                'игла': СмертьКощея()
                            }
                        }
                    }
                }
            }
        }
    }

``СмертьКощея()`` - это объект класса ``СмертьКощея``, который может выглядеть к примеру так:

.. code-block:: python3

    class СмертьКощея(object):

        def __json__(self, request):

            return {
                'имя': 'кощей',
                'статус': request.context == self and 'мертв' or 'жив ещё',
            }

В принципе, этого достаточно что бы наш сайт-убийца "кощея" заработал.
Осталось лишь прописать пути и добавить представление (view).

View будет просто возвращать объект, например, если мы ввели:

.. code-block:: text

    URL: 'остров'
    объект: {'дуб': {
                'сундук': {
                    'заяц': {
                        'утка': {
                            'яйцо': {
                                'игла': СмертьКощея()
                            }
                        }
                    }
                }
            }}

.. code-block:: text

    URL: 'остров/дуб'
    объект: {'сундук': {
                'заяц': {
                    'утка': {
                        'яйцо': {
                            'игла': СмертьКощея()
                        }
                    }
                }
            }}

.. code-block:: text

    URL: 'остров/дуб/сундук'
    объект: {'заяц': {
                'утка': {
                    'яйцо': {
                        'игла': СмертьКощея()
                    }
                }
            }}

.. code-block:: text

    URL: 'остров/дуб/сундук/заяц'
    объект: {'утка': {
                'яйцо': {
                    'игла': СмертьКощея()
                }
            }}

.. code-block:: text

    URL: 'остров/дуб/сундук/заяц/утка'
    объект: {'яйцо': {
                'игла': СмертьКощея()
            }}

.. code-block:: text

    URL: 'остров/дуб/сундук/заяц/утка/яйцо'
    объект: {'игла': СмертьКощея()}

.. code-block:: text

    URL: 'остров/дуб/сундук/заяц/утка/яйцо/игла'
    объект: СмертьКощея()

Такие функции-представления (View) должны принимать 2 параметра, где первый
параметр будет являться объектом, обычно именуемым ``context``, а второй
параметр ``request``:

.. code-block:: python3

    def traverse_koshey(context, request):
        return context  # Наш объект

Роуты создаются почти так же как в ``pattern matching``, за исключением того,
что структура путей передается в виде "фабрики", которая возвращает словарь или
ему подобный (dict-like) объект. Путь указывается в виде статической и
динамической части, например ``/fixedpath/*traverse``:

.. code-block:: python3

    config.add_route('koshey', '/mytraversal/*traverse', factory=my_factory)

Фабрика, которая возвращает структуру сайта:

.. code-block:: python3

    def my_factory(request):
        return {
            'остров': {
                'дуб': {
                    'сундук': {
                        'заяц': {
                            'утка': {
                                'яйцо': {
                                    'игла': СмертьКощея()
                                }
                            }
                        }
                    }
                }
            }
        }

View добавляется стандартно:

.. code-block:: python3

    config.add_view(traverse_koshey, route_name='koshey', renderer='json')

Все готово, можно перемещаться по объектам:

* `<http://localhost:8080/mytraversal/>`_
* `<http://localhost:8080/mytraversal/остров>`_
* `<http://localhost:8080/mytraversal/остров/дуб>`_
* `<http://localhost:8080/mytraversal/остров/дуб/сундук>`_
* `<http://localhost:8080/mytraversal/остров/дуб/сундук/заяц>`_
* `<http://localhost:8080/mytraversal/остров/дуб/сундук/заяц/утка>`_
* `<http://localhost:8080/mytraversal/остров/дуб/сундук/заяц/утка/яйцо>`_
* `<http://localhost:8080/mytraversal/остров/дуб/сундук/заяц/утка/яйцо/игла>`_

Полный пример:

.. literalinclude:: /../examples/pyramid/traversal/example1.py
   :language: python3
   :linenos:

Есть один нюанс, json renderer, по умолчанию, все не латинские символы отображает
как UTF коды ``\uxxxx``, поэтому мы увидим следующий вывод:

.. code-block:: json

    {"\u043e\u0441\u0442\u0440\u043e\u0432": {"\u0434\u0443\u0431": {"\u0441\u0443\u043d\u0434\u0443\u043a": {"\u0437\u0430\u044f\u0446": {"\u0443\u0442\u043a\u0430": {"\u044f\u0439\u0446\u043e": {"\u0438\u0433\u043b\u0430": {"\u0441\u0442\u0430\u0442\u0443\u0441": "\u0436\u0438\u0432 \u0435\u0449\u0451", "\u0438\u043c\u044f": "\u043a\u043e\u0449\u0435\u0439"}}}}}}}}

Но можно изменить его поведение следующим образом:

.. code-block:: python3
   :emphasize-lines: 3

    from pyramid.renderers import JSON
    ...
    config.add_renderer('myjson', JSON(indent=4, ensure_ascii=False))
    config.add_view(traverse_koshey, route_name='koshey', renderer='myjson')

Результат:

`<http://localhost:8080/mytraversal/>`_

.. code-block:: json

    {
        "остров": {
            "дуб": {
                "сундук": {
                    "заяц": {
                        "утка": {
                            "яйцо": {
                                "игла": {
                                    "имя": "кощей",
                                    "статус": "жив ещё"
                                }
                            }
                        }
                    }
                }
            }
        }
    }

`<http://localhost:8080/mytraversal/остров/дуб/сундук/заяц/утка/яйцо/игла>`_

.. code-block:: json

    {
        "имя": "кощей",
        "статус": "мертв"
    }

Полный код:

.. literalinclude:: /../examples/pyramid/traversal/example2.py
   :language: python3
   :linenos:

Привязка View к ресурсам
~~~~~~~~~~~~~~~~~~~~~~~~

В Пирамиде объект (context) который передается во вью, именуют еще как "ресурс".
Есть возможность жестко привязать View к типу ресурса. Например, наше
представление ``traverse_koshey`` должно вызываться, только когда пришел объект
класса ``СмертьКощея``:

.. code-block:: python3
    :emphasize-lines: 3

    config.add_view(traverse_koshey, route_name='koshey_context',
                    renderer='myjson',
                    context=СмертьКощея)

Параметр ``context`` указывает на то, что это View принадлежит ТОЛЬКО объектам
класса ``СмертьКащея``.

Все пути, кроме полного (который возвращает нужный объект), вернут 404 код ответа.
Полный путь `<http://localhost:8080/mytraversal/остров/дуб/сундук/заяц/утка/яйцо/игла>`_.

Добавим в нашу структуру еще ресурсов:

.. code-block:: python3

    def my_factory(request):
        return {
            'превед': Человек(),
            'остров': {
                'ясень': {
                    'что то здесь': 'не так!'
                },
                'дуб': {
                    'сундук': {
                        'заяц': {
                            'утка': {
                                'яйцо': {
                                    'игла': СмертьКощея()
                                }
                            }
                        }
                    }
                }
            }
        }

Здесь ``Человек()`` это новый тип ресурса, который имеет метод ``__getitem__``
как у словаря и при обращении по ключу возвращает другой ресурс:

.. code-block:: python3

    class Человек(object):

        name = 'Человек'

        def __getitem__(self, name):
            return Имя(name)


    class Имя(object):

        __parent__ = Человек()

        def __init__(self, name):
            self.name = name

Например мы обращаемся по URL `<http://localhost:8080/mytraversal/превед/Пирамид>`_.
``превед`` вернет ресурс ``Человек``, а ``Пирамид`` вызовет метод
``__getitem__``, который вернет ресурс ``Имя('Пирамид')``. Таким образом мы
можем строить дерево динамически при помощи dict-like объектов.

Для ресурса ``Имя`` мы можем создать отдельное представление и жестко привязать
его к этому типу.

.. code-block:: python3

    def traverse_hello(context, request):
        """
        http://localhost:8080/mytraversal/первед/Пирамид
        """
        return Response('Превед ' + context.__parent__.name + ' ' + context.name)

    ...

    config.add_view(traverse_hello, route_name='koshey_context',
                    renderer='text',
                    context=Имя)

Результат вывода по адресу
`<http://localhost:8080/mytraversal/превед/Пирамид>`_, будет обычный текст
(``Content-Type: plain/text``):

.. code-block:: text

   Превед Человек Пирамид

Полный пример:

.. literalinclude:: /../examples/pyramid/traversal/example3.py
   :language: python3
   :linenos:

Комбинация обоих методов
------------------------

Фреймворк ``Pyramid`` позволяет использовать оба способа URL маршрутизации
одновременно.

Добавим к примеру с "кащеем" hello world с использованием pattern matching:

.. code-block:: python3

    def hello_world(request):
        return Response('Hello %(name)s!' % request.matchdict)

    ...

    # Pattern matching routes
    config.add_route('hello', '/hello/{name}')
    config.add_view(hello_world, route_name='hello')

Полный пример:

.. literalinclude:: /../examples/pyramid/traversal/example4.py
   :language: python3
   :caption: Комбинированный способ маршрутизации traversal и pattern matching
   :linenos:
