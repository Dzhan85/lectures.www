SQL выражения
=============

.. seealso::

   * http://rus-linux.net/MyLDP/BOOKS/Architecture-Open-Source-Applications/Vol-2/sqlalchemy-05
   * http://www.tutorialspoint.com/hibernate/hibernate_query_language.htm

В момент начала разработки :l:`SQLAlchemy` способ генерации SQL-запросов не был ясен. Текстовый язык мог быть хорошим кандидатом; это стандартный подход, лежащий в основе таких широко известных инструментов объектно-реляционного отображения, как `HQL <https://docs.jboss.org/hibernate/orm/3.3/reference/en/html/queryhql.html>`_ из состава :l:`Hibernate`. В случае использования языка программирования Python, однако, был доступен более занимательный вариант: использование объектов и выражений языка Python для генерации древовидных структур представления запросов, причем возможным было даже изменение назначения операторов языка Python с целью использования их для формирования SQL-запросов.

Хотя рассматриваемый инструмент и не был первым инструментом, выполняющим подобные функции, следует упомянуть о библиотеке :l:`SQLBuilder` из состава :l:`SQLObject` от :l:`Ian Bicking`, которая была использована как образец при создании системы работы с объектами языка Python и операторами, используемыми в рамках языка формирования запросов :l:`SQLAlchemy`. При использовании данного подхода объекты языка Python представляют лексические части SQL-запроса. Методы этих объектов, также как и перегружаемые операторы, позволяют генерировать новые унаследованные от существующих лексические конструкции. Наиболее часто используемым объектом является представляющий столбец объект "Column" - библиотека :l:`SQLObject` будет представлять такие объекты в рамках класса объектно-реляционного отображения, используя пространство имен с доступом посредством атрибута .q; также в :l:`SQLAlchemy` объявлен атрибут с именем .c. Этот атрибут .c на сегодняшний день поддерживается и используется для представления элементов основной части, подвергающихся выборке, таких, как объекты, представляющие таблицы и запросы выборки.

Создание таблицы
----------------

.. code-block:: ipython
   :linenos:

   >>> from sqlalchemy import MetaData, Table, Column, String, Integer

   >>> metadata = MetaData()
   >>> user_table = Table('user', metadata,
   ...                     Column('id', Integer, primary_key=True),
   ...                     Column('username', String(50)),
   ...                     Column('fullname', String(50))
   ...                    )

   >>> from sqlalchemy import create_engine
   >>> engine = create_engine("sqlite://")
   >>> metadata.create_all(engine)

   [SQL]: PRAGMA table_info("user")
   [SQL]: ()
   [SQL]:
   CREATE TABLE user (
       id INTEGER NOT NULL,
       username VARCHAR(50),
       fullname VARCHAR(50),
       PRIMARY KEY (id)
   )


   [SQL]: ()
   [SQL]: COMMIT

Простой пример выражений
------------------------

Каждая колонка в SQAlchemy является частью класса :class:`sqlalchemy.sql.expression.ColumnElement`.

В примере ниже показывается соответствие SQL выражения с Python выражением `сравнения`. Такое преобразование возможно при помощи реализации "магического" Python метода :meth:`sqlalchemy.sql.expression.ColumnElement.__eq__`.

.. code-block:: ipython
   :linenos:
   :emphasize-lines: 7

   >>> user_table.c.username
   Column('username', String(length=50), table=<user>)
   >>>
   >>> user_table.c.username == 'ed'
   <sqlalchemy.sql.expression.BinaryExpression object at 0x7fb829e60a90>
   >>>
   >>> str(user_table.c.username == 'ed')
   '"user".username = :username_1'

Комбинация нескольких выражений

.. code-block:: ipython
   :linenos:
   :emphasize-lines: 4

   >>> print(
   ...     (user_table.c.username == 'ed') | (user_table.c.username == 'jack')
   ...     )
   "user".username = :username_1 OR "user".username = :username_2

Функции OR и AND
----------------

SQL операторы OR и AND соответствуют побитовым операторам в Python ``|`` и ``&`` или функциям :func:`sqlalchemy.sql.expression.or_` и :func:`sqlalchemy.sql.expression.and_`.

.. code-block:: ipython
   :linenos:

   >>> from sqlalchemy import and_, or_

   >>> print(
   ...     and_(
   ...         user_table.c.fullname == 'ed jones',
   ...             or_(
   ...                 user_table.c.username == 'ed',
   ...                 user_table.c.username == 'jack'
   ...             )
   ...         )
   ...     )
   "user".fullname = :fullname_1 AND ("user".username = :username_1 OR "user".username = :username_2)

Операторы
---------

Многие операторы наследуются из класса :class:`sqlalchemy.sql.operators.ColumnOperators`

.. list-table:: Соответствие магических методов Python и переопределенных методов в `SQLAlchemy`
   :header-rows: 1

   * - SQLAlchemy оператор
     - Название оператора
     - Python оператор
   * - :meth:`sqlalchemy.sql.operators.ColumnOperators.__add__`
     - add
     - ``+``
   * - :meth:`sqlalchemy.sql.operators.ColumnOperators.__and__`
     - and
     - ``&``
   * - :meth:`sqlalchemy.sql.expression.ColumnElement.__eq__`
     - equal
     - ``==``
   * - :meth:`sqlalchemy.sql.operators.ColumnOperators.__ge__`
     - greater equal
     - ``>=``
   * - :meth:`sqlalchemy.sql.operators.ColumnOperators.__gt__`
     - greater than
     - ``>``
   * - :meth:`sqlalchemy.sql.expression.ColumnElement.__le__`
     - less equal
     - ``<=``
   * - :meth:`sqlalchemy.sql.expression.ColumnElement.__lt__`
     - less than
     - ``<``
   * - :meth:`sqlalchemy.sql.expression.ColumnElement.__ne__`
     - not equal
     - ``!=``
   * - :meth:`sqlalchemy.sql.operators.ColumnOperators.__or__`
     - or
     - ``|``
   * - :meth:`sqlalchemy.sql.operators.ColumnOperators.in_`
     - in
     - ``in``
   * - :meth:`sqlalchemy.sql.operators.ColumnOperators.notin_`
     - not in
     - ``not in``

Операторы сравнения
~~~~~~~~~~~~~~~~~~~

.. code-block:: ipython
   :linenos:

   >>> print(user_table.c.id == 5)
   "user".id = :id_1
   >>> print(user_table.c.id >= 5)
   "user".id >= :id_1
   >>> print(user_table.c.id > 5)
   "user".id > :id_1
   >>> print(user_table.c.id <= 5)
   "user".id <= :id_1
   >>> print(user_table.c.id < 5)
   "user".id < :id_1
   >>> print(user_table.c.id != 5)
   "user".id != :id_1

Сравнение с ``None`` преобразуется в SQL конструкцию ``IS NULL``.

.. code-block:: ipython
   :linenos:

   >>> print(user_table.c.id != None)
   "user".id IS NOT NULL
   >>> print(user_table.c.id == None)
   "user".id IS NULL

Операторы AND и OR
~~~~~~~~~~~~~~~~~~

.. code-block:: ipython
   :linenos:

   >>> print((user_table.c.id == None) | (user_table.c.fullname == 'Vasya'))
   "user".id IS NULL OR "user".fullname = :fullname_1
   >>> print((user_table.c.id == None) & (user_table.c.fullname == 'Vasya'))
   "user".id IS NULL AND "user".fullname = :fullname_1

Оператор сложения
~~~~~~~~~~~~~~~~~

Арифметический оператор сложения

.. code-block:: ipython
   :linenos:

   >>> print(user_table.c.id + 5)
   "user".id + :id_1

Python оператор сложения автоматически определяет строки и подставляет SQL
оператор конкатенации ``||``

.. code-block:: ipython
   :linenos:

   >>> print(user_table.c.fullname + "some name")
   "user".fullname || :fullname_1

Операторы IN и NOT IN
~~~~~~~~~~~~~~~~~~~~~

.. code-block:: ipython
   :linenos:

   >>> print(user_table.c.username.in_(["wendy", "mary", "ed"]))
   "user".username IN (:username_1, :username_2, :username_3)

   >>> print(user_table.c.username.notin_(["wendy", "mary", "ed"]))
   "user".username NOT IN (:username_1, :username_2, :username_3)

Компиляция SQL выражений
------------------------

Скомпилированное выражение является объектом класса :class:`sqlalchemy.sql.compiler.SQLCompiler`

Диалекты
~~~~~~~~

.. seealso::

   * http://docs.sqlalchemy.org/en/latest/dialects/index.html

Диалекты разных СУБД описаны в модулях:

* :mod:`sqlalchemy.dialects.firebird`
* :mod:`sqlalchemy.dialects.mssql`
* :mod:`sqlalchemy.dialects.mysql`
* :mod:`sqlalchemy.dialects.oracle`
* :mod:`sqlalchemy.dialects.postgresql`
* :mod:`sqlalchemy.dialects.sqlite`
* :mod:`sqlalchemy.dialects.sybase`

SQLite
""""""

.. code-block:: ipython
   :linenos:

   >>> from sqlalchemy.dialects import sqlite
   >>> print(expression.compile(dialect=sqlite.dialect()))
   user.username = ?

MySQL
"""""

.. code-block:: ipython
   :linenos:

   >>> expression = user_table.c.username == 'ed'

   >>> from sqlalchemy.dialects import mysql
   >>> print(expression.compile(dialect=mysql.dialect()))
   user.username = %s

PostgreSQL
""""""""""

.. code-block:: ipython
   :linenos:

   >>> from sqlalchemy.dialects import postgresql
   >>> print(expression.compile(dialect=postgresql.dialect()))
   "user".username = %(username_1)s

Firebird
""""""""

.. code-block:: ipython
   :linenos:

   >>> from sqlalchemy.dialects import firebird
   >>> print(expression.compile(dialect=firebird.dialect()))
   "user".username = :username_1

MSSQL
"""""

.. code-block:: ipython
   :linenos:

   >>> from sqlalchemy.dialects import mssql
   >>> print(expression.compile(dialect=mssql.dialect()))
   [user].username = :username_1

Параметры
~~~~~~~~~

При компиляции SQL выражения буквенные значения преобразуются в параметры, они доступны через атрибут :attr:`sqlalchemy.sql.compiler.SQLCompiler.params`


.. code-block:: ipython
   :linenos:

   >>> expression = user_table.c.username == 'ed'
   >>> compiled = expression.compile()
   >>> compiled.params
   {u'username_1': 'ed'}

Параметры извлекаются при выполнении запроса

.. code-block:: ipython
   :linenos:

   >>> engine.execute(
   ...         user_table.select().where(user_table.c.username == 'ed')
   ...     )
   [SQL]: SELECT user.id, user.username, user.fullname
   FROM user
   WHERE user.username = ?
   [SQL]: ('ed',)
   <sqlalchemy.engine.result.ResultProxy object at 0x7f3714aec3d0>

INSERT
------

SQL запросы INSERT можно формировать при помощи метода :meth:`sqlalchemy.schema.Table.insert`.

.. code-block:: ipython
   :linenos:

   >>> insert_stmt = user_table.insert().values(username='ed', fullname='Ed Jones')
   >>> conn = engine.connect()
   >>> result = conn.execute(insert_stmt)

   [SQL]: INSERT INTO user (username, fullname) VALUES (?, ?)
   [SQL]: ('ed', 'Ed Jones')
   [SQL]: COMMIT

Результат выполнения содержит в себе значение ``primary_key`` добавленной записи в БД.

.. code-block:: ipython
   :linenos:

   >>> result.inserted_primary_key
   [1]

Запись нескольких строк в таблицу за раз.

.. code-block:: ipython
   :linenos:

   >>> conn.execute(user_table.insert(), [
   ...     {'username': 'jack', 'fullname': 'Jack Burger'},
   ...     {'username': 'wendy', 'fullname': 'Wendy Weathersmith'}
   >>> ])

   [SQL]: INSERT INTO user (username, fullname) VALUES (?, ?)
   [SQL]: (('jack', 'Jack Burger'), ('wendy', 'Wendy Weathersmith'))
   [SQL]: COMMIT
   <sqlalchemy.engine.result.ResultProxy object at 0x7f3714aec810>

SELECT
------

SQL запросы SELECT можно формировать при помощи функции :func:`sqlalchemy.sql.expression.select`.

.. code-block:: ipython
   :linenos:

   >>> from sqlalchemy import select
   >>> select_stmt = select([user_table.c.username, user_table.c.fullname]).\
   ...             where(user_table.c.username == 'ed')
   >>> result = conn.execute(select_stmt)
   >>> for row in result:
   ...     print(row)

   [SQL]: SELECT user.username, user.fullname
   FROM user
   WHERE user.username = ?
   [SQL]: ('ed',)
   (u'ed', u'Ed Jones')

Выбор всех полей таблицы.

:meth:`sqlalchemy.engine.ResultProxy.fetchall`

.. code-block:: ipython
   :linenos:

   >>> select_stmt = select([user_table])
   >>> conn.execute(select_stmt).fetchall()

   FROM user
   [SQL]: ()
   [(1, u'ed', u'Ed Jones'), (2, u'jack', u'Jack Burger'), (3, u'wendy', u'Wendy Weathersmith'), (4, u'jack', u'Jack Burger'), (5, u'wendy', u'Wendy Weathersmith')]

WHERE
-----

Условие WHERE можно указать как метод класса ``Select`` :meth:`sqlalchemy.sql.expression.Select.where`

.. code-block:: ipython
   :linenos:

   >>> select_stmt = select([user_table]).\
   ...                     where(
   ...                         or_(
   ...                             user_table.c.username == 'ed',
   ...                             user_table.c.username == 'wendy'
   ...                         )
   ...                     )
   >>> conn.execute(select_stmt).fetchall()

   [press return to run code]
   [SQL]: SELECT user.id, user.username, user.fullname
   FROM user
   WHERE user.username = ? OR user.username = ?
   [SQL]: ('ed', 'wendy')
   [(1, u'ed', u'Ed Jones'), (3, u'wendy', u'Wendy Weathersmith'), (5, u'wendy', u'Wendy Weathersmith')]

Несколько вызовов метода ``where`` сливаются в одно SQL выражения при помощи оператора AND

.. code-block:: ipython
   :linenos:
   :emphasize-lines: 2-3, 8

   >>> select_stmt = select([user_table]).\
   ...                     where(user_table.c.username == 'ed').\
   ...                     where(user_table.c.fullname == 'ed jones')
   >>> conn.execute(select_stmt).fetchall()

   [SQL]: SELECT user.id, user.username, user.fullname
   FROM user
   WHERE user.username = ? AND user.fullname = ?
   [SQL]: ('ed', 'ed jones')

ORDER BY
--------

ORDER BY соответствует методу :meth:`sqlalchemy.sql.expression.Select.order_by`

.. code-block:: ipython
   :linenos:

   >>> select_stmt = select([user_table]).\
   ...                     order_by(user_table.c.username)
   >>> print(conn.execute(select_stmt).fetchall())

   [SQL]: SELECT user.id, user.username, user.fullname
   FROM user ORDER BY user.username
   [SQL]: ()
   [(1, u'ed', u'Ed Jones'), (2, u'jack', u'Jack Burger'), (4, u'jack', u'Jack Burger'), (3, u'wendy', u'Wendy Weathersmith'), (5, u'wendy', u'Wendy Weathersmith')]

FOREIGN KEY
-----------

FOREIGN KEY соответствует классу :class:`sqlalchemy.schema.ForeignKey`.

.. code-block:: ipython
   :linenos:

   >>> from sqlalchemy import ForeignKey
   >>> address_table = Table("address", metadata,
   ...                         Column('id', Integer, primary_key=True),
   ...                         Column('user_id', Integer, ForeignKey('user.id'),
   ...                                                             nullable=False),
   ...                         Column('email_address', String(100), nullable=False)
   ...                       )
   >>> metadata.create_all(engine)

   [SQL]: PRAGMA table_info("user")
   [SQL]: ()
   [SQL]: PRAGMA table_info("address")
   [SQL]: ()
   [SQL]:
   CREATE TABLE address (
       id INTEGER NOT NULL,
       user_id INTEGER NOT NULL,
       email_address VARCHAR(100) NOT NULL,
       PRIMARY KEY (id),
       FOREIGN KEY(user_id) REFERENCES user (id)
   )

   [SQL]: ()
   [SQL]: COMMIT

   >>> conn.execute(address_table.insert(), [
   ...     {"user_id": 1, "email_address": "ed@ed.com"},
   ...     {"user_id": 1, "email_address": "ed@gmail.com"},
   ...     {"user_id": 2, "email_address": "jack@yahoo.com"},
   ...     {"user_id": 3, "email_address": "wendy@gmail.com"},
   >>> ])

   [SQL]: INSERT INTO address (user_id, email_address) VALUES (?, ?)
   [SQL]: ((1, 'ed@ed.com'), (1, 'ed@gmail.com'), (2, 'jack@yahoo.com'), (3, 'wendy@gmail.com'))
   [SQL]: COMMIT
   <sqlalchemy.engine.result.ResultProxy object at 0x7f3714b0b9d0>

JOIN
----

Два объекта :class:`sqlalchemy.schema.Table` могут быть связанны при помощи метода :meth:`sqlalchemy.schema.Table.join`.

.. code-block:: ipython
   :linenos:

   >>> join_obj = user_table.join(address_table,
   ...                             user_table.c.id == address_table.c.user_id)
   >>> print(join_obj)
   "user" JOIN address ON "user".id = address.user_id

   >>> ForeignKey
   <class 'sqlalchemy.schema.ForeignKey'>
   >>>

Условие ON подставляется автоматически

.. code-block:: ipython
   :linenos:

   >>> join_obj = user_table.join(address_table)
   >>> print(join_obj)
   "user" JOIN address ON "user".id = address.user_id

Выполнить SQL запрос следующей конструкции SELECT FROM JOIN можно при помощи метода :meth:`sqlalchemy.sql.expression.Select.select_from`.

.. code-block:: ipython
   :linenos:

   >>> select_stmt = select([user_table, address_table]).select_from(join_obj)
   >>> conn.execute(select_stmt).fetchall()

   [SQL]: SELECT user.id, user.username, user.fullname, address.id, address.user_id, address.email_address
   FROM user JOIN address ON user.id = address.user_id
   [SQL]: ()
   [(1, u'ed', u'Ed Jones', 1, 1, u'ed@ed.com'), (1, u'ed', u'Ed Jones', 2, 1, u'ed@gmail.com'), (2, u'jack', u'Jack Burger', 3, 2, u'jack@yahoo.com'), (3, u'wendy', u'Wendy Weathersmith', 4, 3, u'wendy@gmail.com')]

Вложенные запросы
-----------------

.. code-block:: ipython
   :linenos:

   >>> select_stmt = select([user_table]).where(user_table.c.username == 'ed')

   >>> print(
   ...     select([select_stmt.c.username]).
   ...         where(select_stmt.c.username == 'ed')
   ...    )
   SELECT username
   FROM (SELECT "user".id AS id, "user".username AS username, "user".fullname AS fullname
   FROM "user"
   WHERE "user".username = :username_1)
   WHERE username = :username_2

Алиас (AS)
~~~~~~~~~~

Конструкция AS добавляется при помощи метода :meth:`sqlalchemy.sql.expression.Select.alias`.

.. code-block:: ipython
   :linenos:

   >>> select_alias = select_stmt.alias()
   >>> print(
   ...     select([select_alias.c.username]).
   ...         where(select_alias.c.username == 'ed')
   ...    )
   SELECT anon_1.username
   FROM (SELECT "user".id AS id, "user".username AS username, "user".fullname AS fullname
   FROM "user"
   WHERE "user".username = :username_1) AS anon_1
   WHERE anon_1.username = :username_2


Более сложный пример

Подзапрос использует дополнительно конструкции ``GROUP BY`` и ``count()``:

* :meth:`sqlalchemy.sql.expression.Select.group_by`
* :class:`sqlalchemy.sql.functions.count`

.. code-block:: ipython
   :linenos:

   >>> from sqlalchemy import func
   >>> address_subq = select([
   ...                     address_table.c.user_id,
   ...                     func.count(address_table.c.id).label('count')
   ...                 ]).\
   ...                 group_by(address_table.c.user_id).\
   ...                 alias()
   >>> print(address_subq)
   SELECT address.user_id, count(address.id) AS count
   FROM address GROUP BY address.user_id

Вложенный запрос применяет алиас подзапроса.

.. code-block:: ipython
   :linenos:

   >>> username_plus_count = select([
   ...                             user_table.c.username,
   ...                             address_subq.c.count
   ...                         ]).select_from(
   ...                             user_table.join(address_subq)
   ...                          ).order_by(user_table.c.username)

   >>> conn.execute(username_plus_count).fetchall()
   [SQL]: SELECT user.username, anon_1.count
   FROM user JOIN (SELECT address.user_id AS user_id, count(address.id) AS count
   FROM address GROUP BY address.user_id) AS anon_1 ON user.id = anon_1.user_id ORDER BY user.username
   [SQL]: ()
   [(u'ed', 2), (u'jack', 1), (u'wendy', 1)]

Скалярные запросы
-----------------

.. epigraph::

   Скаля́р (от лат. scalaris — ступенчатый) — величина, каждое значение которой может быть выражено одним числом. В математике под «числами» могут подразумеваться элементы произвольного поля, тогда когда в физике имеются в виду действительные или комплексные числа. О функции, принимающей скалярные значения, говорят как о скалярной функции.

   -- WikiPedia

Скалярный SELECT вернет только одно поле одной строки.

.. code-block:: ipython
   :linenos:

   >>> address_sel = select([
   ...                 func.count(address_table.c.id)
   ...                 ]).\
   ...                 where(user_table.c.id == address_table.c.user_id)
   >>> print(address_sel)
   SELECT count(address.id) AS count_1
   FROM address, "user"
   WHERE "user".id = address.user_id

Что бы его вызвать в подзапросе нужно использовать метод :meth:`sqlalchemy.sql.expression.Select.as_scalar`

.. code-block:: ipython
   :linenos:

   >>> select_stmt = select([user_table.c.username, address_sel.as_scalar()])
   >>> conn.execute(select_stmt).fetchall()

   [SQL]: SELECT user.username, (SELECT count(address.id) AS count_1
   FROM address
   WHERE user.id = address.user_id) AS anon_1
   FROM user
   [SQL]: ()
   [(u'ed', 2), (u'jack', 1), (u'wendy', 1), (u'jack', 0), (u'wendy', 0)]

UPDATE
------

:meth:`sqlalchemy.schema.Table.update`

.. code-block:: ipython
   :linenos:

   >>> update_stmt = address_table.update().\
   ...                     values(email_address="jack@msn.com").\
   ...                     where(address_table.c.email_address == "jack@yahoo.com")
   >>> result = conn.execute(update_stmt)

   [SQL]: UPDATE address SET email_address=? WHERE address.email_address = ?
   [SQL]: ('jack@msn.com', 'jack@yahoo.com')
   [SQL]: COMMIT

UPDATE запрос значение которого строится из значения полей текущей записи

.. code-block:: ipython
   :linenos:

   >>> update_stmt = user_table.update().\
   ...                     values(fullname=user_table.c.username +
   ...                             " " + user_table.c.fullname)
   >>> result = conn.execute(update_stmt)

   [SQL]: UPDATE user SET fullname=(user.username || ? || user.fullname)
   [SQL]: (' ',)
   [SQL]: COMMIT

   >>> conn.execute(select([user_table])).fetchall()
   [SQL]: SELECT user.id, user.username, user.fullname
   FROM user
   [SQL]: ()
   [(1, u'ed', u'ed Ed Jones'), (2, u'jack', u'jack Jack Burger'), (3, u'wendy', u'wendy Wendy Weathersmith'), (4, u'jack', u'jack Jack Burger'), (5, u'wendy', u'wendy Wendy Weathersmith')]

DELETE
------

:meth:`sqlalchemy.schema.Table.delete`

.. code-block:: ipython
   :linenos:

   >>> delete_stmt = address_table.delete().\
   ...                 where(address_table.c.email_address == "ed@ed.com")
   >>> result = conn.execute(delete_stmt)

   [SQL]: DELETE FROM address WHERE address.email_address = ?
   [SQL]: ('ed@ed.com',)
   [SQL]: COMMIT

Количество удаленных строк (применимо и для UPDATE).

.. code-block:: ipython
   :linenos:

   >>> result.rowcount
   1

Полный пример
-------------

.. literalinclude:: /../sourcecode/6.www.sync/2.codding/9.databases/2.sqlalchemy/3.sql_expression.py
   :language: python
   :caption: 2.sqlalchemy/3.sql_expression.py
   :linenos:
