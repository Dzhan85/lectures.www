Paste
=====

.. seealso::

   * https://ru.wikipedia.org/wiki/Python_Paste

.. note::

   Исходный код доступен по адресу:

   * :src:`6.www.sync/2.codding/0.paster`

Python `Paste`, или просто `Paste` — набор программ для веб-разработки.
Включает в себя множество различных `middleware`, `WSGI-сервер` и другое. Был
разработан `Яном Бикингом`, что бы показать всю красоту спецификации `WSGI`,
которая на тот момент была еще в черновиках. Проект больше академический и до
недавнего времени не имел даже поддержки `Python 3`, но несмотря на это, многие
современные фреймворки взяли за основу примеры из `Paste` (:l:`TurboGears`,
:l:`Zope`, :l:`Pylons`, :l:`Pyramid`)

В нем есть готовая поддержка самых `разных способов аутентификации
<http://pythonpaste.org/developer-features.html>`_ (Basic, Digest, form, signed
cookie, auth_tkt), поддержка корректной и удобной генерации ответов и
`заголовков <http://pythonpaste.org/modules/httpheaders.html>`_ (к примеру
редиректы, Cache-control, Expires, `gzipper
<http://pythonpaste.org/modules/gzipper.html>`_ и прочие). Различные базовые
средства комбинации приложений (`URLMap
<http://pythonpaste.org/modules/urlmap.html>`_, `Cascade
<http://pythonpaste.org/modules/cascade.html>`_, `Recursive
<http://pythonpaste.org/modules/recursive.html>`_), `статических данных
<http://pythonpaste.org/modules/urlparser.html>`_ (с учетом Etag, If-Modified
итп).

Некоторые возможности ``paste`` мы рассмотрели в разделе :ref:`wsgi`.

.. warning::

   Примеры работают только в Python3

HTTP server
-----------

.. seealso::

   * http://pythonpaste.org/modules/httpserver.html#module-paste.httpserver

Встроенный `WSGI` сервер :mod:`wsgiref` появился в `Python` начиная с версии
`2.5 <https://docs.python.org/2/whatsnew/2.5.html#the-wsgiref-package>`_,
частично вобрав наработки из модуля :mod:`paste.httpserver`. На данный момент
целесообразно использовать встроенный в Python модуль :mod:`wsgiref` или
сторонние более производительные реализации :l:`waitress` и :l:`gunicorn`.

В нашем случае подойдет любая реализация сервера отвечающего стандарту `WSGI`,
поэтому в примерах используется :mod:`paste.httpserver`. С его помощью запустим
простое `WSGI-приложение`:

.. literalinclude:: /../sourcecode/6.www.sync/2.codding/0.paster/0_step.py
   :language: python
   :linenos:

.. figure:: /_static/6.www.sync/wsgi/blog/1_0_step_dia.*
   :align: center
   :width: 450pt

   Схема работы WSGI-приложения `Blog`

Теперь приложение доступно по адресу http://localhost:8000/.

.. figure:: /_static/6.www.sync/wsgi/blog/1_0_step.png
   :align: center
   :scale: 80

   Главная страница блога

.. note:: Стоит отметить что приложение будет доступно по любому пути этого
   адреса, например:

   * http://localhost:8000/
   * http://localhost:8000/foo
   * http://localhost:8000/foo/bar/
   * http://localhost:8000/foo/bar/baz
   * http://localhost:8000/no_good

URL диспетчеризация
-------------------

Для разделения путей напишем `WSGI-middleware` ``URLDispatch``.

.. literalinclude:: /../sourcecode/6.www.sync/2.codding/0.paster/middlewares/urldispatch.py
   :language: python
   :pyobject: URLDispatch
   :linenos:

.. figure:: /_static/6.www.sync/wsgi/blog/1_1_step_dia.*
   :align: center
   :width: 450pt

   URLDispatch middleware

Добавим настройки в наше приложение:

.. literalinclude:: /../sourcecode/6.www.sync/2.codding/0.paster/1_step.py
   :language: python
   :emphasize-lines: 12, 20-24
   :linenos:

Любой путь отличающийся от корневого (http://localhost:8000/), по которому доступно приложение ``blog``, будет инициализировать `404 код ошибки`.

.. figure:: /_static/6.www.sync/wsgi/blog/1_1_step.png
   :align: center
   :scale: 80

   `404 Not Found`

`Блог` будет состоять из следующих страниц:

.. tabularcolumns:: |p{4.5cm}|p{4.5cm}|p{5.2cm}|
.. list-table:: Страницы блога
   :header-rows: 1

   * - Название
     - URL
     - Описание
   * - Главная
     - \/
     - Показывает все записи в блоге, отсортированные по дате
   * - (**CREATE**) Добавление
     - /article/add
     - Форма добавления новой статьи
   * - (**READ**) Просмотр
     - /article/{id}
     - Показывает конкретную статью соответствующую {id}
   * - (**UPDATE**) Редактирование
     - /article/{id}/edit
     - Редактирование статьи по {id}
   * - (**DELETE**) Удаление
     - /article/{id}/delete
     - Удаление статьи по {id}

Добавим `WSGI-приложения` которые будут реализовывать `CRUD` и укажем им соответствующие адреса.

.. figure:: /_static/6.www.sync/wsgi/blog/1_2_step_dia.*
   :align: center
   :width: 450pt

   Сопоставление путей и `WSGI-приложений`

.. literalinclude:: /../sourcecode/6.www.sync/2.codding/0.paster/2_step.py
   :language: python
   :emphasize-lines: 22-54
   :linenos:

.. note::

   Обратите внимание, что адреса доступны по следующим ссылкам:

   * http://localhost:8000/article/add
   * `<http://localhost:8000/article/{id}>`_
   * `<http://localhost:8000/article/{id}/edit>`_
   * `<http://localhost:8000/article/{id}/delete>`_

   Если вместо ``{id}`` подставить цифру, то вернется `404 ошибка`.

Перепишем `WSGI-middleware` ``URLDispatch`` так, что бы он понимал регулярные выражения.

.. tabularcolumns:: |p{4.5cm}|p{5.5cm}|p{5.2cm}|
.. list-table:: Страницы блога
   :header-rows: 1

   * - Название
     - URL
     - Описание
   * - Главная
     - \/
     - Показывает все записи в блоге, отсортированные по дате
   * - (**CREATE**) Добавление
     - /article/add
     - Форма добавления новой статьи
   * - (**READ**) Просмотр
     - ^/article/(?P<id>\d+)/$
     - Показывает конкретную статью соответствующую {id}
   * - (**UPDATE**) Редактирование
     - ^/article/(?P<id>\d+)/edit$
     - Редактирование статьи по {id}
   * - (**DELETE**) Удаление
     - ^/article/(?P<id>\d+)/delete$
     - Удаление статьи по {id}

.. literalinclude:: /../sourcecode/6.www.sync/2.codding/0.paster/middlewares/urldispatch.py
   :language: python
   :pyobject: RegexDispatch
   :emphasize-lines: 11-14
   :linenos:

.. figure:: /_static/6.www.sync/wsgi/blog/1_3_step_dia.*
   :align: center
   :width: 550pt

   URL пути на регулярных выражениях

И поменяем настройки:

.. literalinclude:: /../sourcecode/6.www.sync/2.codding/0.paster/3_step.py
   :language: python
   :emphasize-lines: 12, 60-62
   :linenos:

.. note::

   Теперь можно переходить по URL'ам с цифрами заместо {id}, например:

   * http://localhost:8000/article/1
   * http://localhost:8000/article/13/
   * http://localhost:8000/article/100500
   * http://localhost:8000/article/100500/edit
   * http://localhost:8000/article/100500/delete

Данные
------

Добавим базовые данные и функционал для их чтения, удаления.

Данные хранятся в виде списка словарей. Каждый словарь это отдельная статья с
ключами ``id``, ``title``, ``content``.

.. code-block:: python
   :linenos:

   ARTICLES = [
       {'id': 1, 'title': 'Lorem ipsum dolor sid amet!',
        'content': '''Lorem ipsum dolor sit amet, consectetur adipiscing elit.
        Curabitur vel tortor eleifend, sollicitudin nisl quis, lacinia augue.
        Duis quam est, laoreet sit amet justo vitae, viverra egestas sem.
        Maecenas pellentesque augue in nibh feugiat tincidunt. Nunc magna ante,
        mollis vitae ultricies eu, consectetur id ante. In ut libero eleifend,
        blandit ipsum a, ullamcorper nunc. Sed bibendum eget odio eget
        pellentesque. Curabitur elit felis, pellentesque id feugiat et, tincidunt
        ut mauris. Integer vitae vehicula nunc. Integer ullamcorper, nunc in
        volutpat auctor, elit leo convallis nulla, vitae varius mi nisl ac lorem.
        Sed a lacus mi. In hac habitasse platea dictumst. Cras in posuere velit,
        id dignissim nisl. Interdum et malesuada fames ac ante ipsum primis in
        faucibus. Nulla bibendum suscipit convallis.'''},
       {'id': 2, 'title': 'Hello', 'content': 'Test2'},
       {'id': 3, 'title': 'World', 'content': 'Test2'}, ]


Главная страница формируется перебором статей в списке:

.. literalinclude:: /../sourcecode/6.www.sync/2.codding/0.paster/4_step.py
   :language: python
   :pyobject: BlogIndex
   :emphasize-lines: 6-9
   :linenos:

.. figure:: /_static/6.www.sync/wsgi/blog/1_4_step.png
   :align: center
   :scale: 80

   Список статей на главной странице

`WSGI-приложения` ``BlogRead``, ``BlogUpdate`` и ``BlogDelete`` теперь
наследуются от специально класса ``BaseArticle``, он берет ``id`` статьи
(переменная окружения, которую добавляет `middlwware` ``RegexDispatch``) и
находит ее среди списка данных.

.. literalinclude:: /../sourcecode/6.www.sync/2.codding/0.paster/4_step.py
   :language: python
   :pyobject: BaseArticle
   :linenos:

Приложение ``BlogRead`` отвечающее за чтение статьи выводит его содержимое или
отдает `404 ошибку`:

.. literalinclude:: /../sourcecode/6.www.sync/2.codding/0.paster/4_step.py
   :language: python
   :pyobject: BlogRead
   :linenos:

.. figure:: /_static/6.www.sync/wsgi/blog/1_4_step2.png
   :align: center
   :scale: 80

   Страница статьи

Приложение удаляющее статью ``BlogDelete``, удаляет объект из списка данных и
возвращает статус ответа `302 Fount` с заголовком `Location: /`, указывающий
браузеру что нужно перейти на главную страницу (перенаправление).

.. literalinclude:: /../sourcecode/6.www.sync/2.codding/0.paster/4_step.py
   :language: python
   :pyobject: BlogDelete
   :linenos:

Полный код с изменениями:

.. literalinclude:: /../sourcecode/6.www.sync/2.codding/0.paster/4_step.py
   :language: python
   :emphasize-lines: 14-29, 39-47, 55-58, 72-80, 93-97
   :linenos:

Формы
-----

Приложение ``BlogCreate`` проверяет метод запроса, если он `GET`, то возвращает
HTML  форму, если `POST` записывает данные в список ``ARTICLES`` и
перенаправляет на главную страницу.

.. literalinclude:: /../sourcecode/6.www.sync/2.codding/0.paster/5_step.py
   :language: python
   :pyobject: BlogCreate
   :linenos:

.. figure:: /_static/6.www.sync/wsgi/blog/1_5_step.png
   :align: center
   :scale: 70

   Форма создания новой статьи

Обновление статей происходит схожим образом, за исключением того что в форму
подставляются уже существующие данные и вместо добавления нового объекта в
список ``ARTICLES``, обновляется уже существующий.

.. literalinclude:: /../sourcecode/6.www.sync/2.codding/0.paster/5_step.py
   :language: python
   :pyobject: BlogUpdate
   :linenos:

.. figure:: /_static/6.www.sync/wsgi/blog/1_5_step2.png
   :align: center
   :scale: 80

   Форма редактирования статьи

Полный код с изменениями:

.. literalinclude:: /../sourcecode/6.www.sync/2.codding/0.paster/5_step.py
   :language: python
   :emphasize-lines: 60, 68-92, 112-130
   :linenos:

Авторизация
-----------

.. seealso::

   * http://pythonpaste.org/modules/auth.basic.html#module-paste.auth.basic

Для операций которые меняют данные (``BlogCreate``, ``BlogUpdate``,
``BlogDelete``) нужно добавить проверку пользователя.

.. figure:: /_static/6.www.sync/wsgi/blog/1_6_step_dia.*
   :align: center
   :width: 450pt

   BasicAuth `WSGI-middleware` для авторизации

В нашем примере используется алгоритм ``BasicAuth`` и `WSGI-middleware`
``middlewares.basicauth.BasicAuth``.

.. literalinclude:: /../sourcecode/6.www.sync/2.codding/0.paster/middlewares/basicauth.py
   :language: python
   :pyobject: BasicAuth
   :linenos:

Полный код с изменениями:

.. literalinclude:: /../sourcecode/6.www.sync/2.codding/0.paster/6_step.py
   :language: python
   :emphasize-lines: 13, 143-147, 152, 154, 155
   :linenos:
