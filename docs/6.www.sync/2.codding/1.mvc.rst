Разделение кода
===============

.. seealso::

  * `Сравнение скорости фреймворков и чистого WSGI <http://klen.github.io/py-frameworks-bench>`_

В программном обеспечении принято разделять: программную логику, код, который
относится к данным, настройки и шаблоны. Таким образом, код становится более
структурированным, и его легче развивать, а также сопровождать в дальнейшем.

MVC
---

.. seealso::

   * `Статья о фреймворке Ruby on Rails <https://ru.wikipedia.org/wiki/Ruby_on_Rails>`_
   * `Концепция MVC для чайников <http://ruseller.com/lessons.php?rub=37&id=666>`_

**MVC** (Model-View-Controller: модель-вид-контроллер) — шаблон архитектуры ПО,
который подразумевает разделение программы на 3 слабосвязанных компонента,
каждый из которых отвечает за свою сферу деятельности.

Бешеная популярность данной структуры в Веб-приложениях сложилась благодаря её
включению в две среды разработки, которые стали очень востребованными: `Struts
<http://struts.apache.org/>`_ и |rails|_. Эти среды разработки наметили пути
развития для сотен рабочих сред, созданных позже.

.. figure:: /_static/6.www.sync/web/mvc.*
   :align: center
   :width: 400pt

   Паттерн MVC (Model-View-Controller)

* **Model** - модель, предоставляющая доступ к данным. Позволяет извлекать данные и менять их
  состояние;
* **View** - представление, отображающее данные клиенту. В веб-программировании
  существует в виде конечных данных (`HTML`, `JSON`, ...), которые получает
  клиент. Может формироваться при помощи генераторов по заданному шаблону,
  например `Jinja2`, `Mako`; или систем для построения интерфейсов по разметке,
  таких, как `Windows Presentation Foundation` (WPF), либо `Qt Widgets`; или
  описываться декларативно, как это делается в `QML` и `ReactJs`.
* **Controller** - контроллер, отслеживающий различные события (действия пользователя) и по
  заданной логике оповещащий модель о необходимости изменить состояние системы.

Классические `MVC` фреймворки:

* |rails|_
* `Pylons <http://docs.pylonsproject.org/>`_

MTV
---

Фреймворк Django_ ввел новую терминологию **MTV**.

.. note::

    https://docs.djangoproject.com/en/dev/faq/general/#django-appears-to-be-a-mvc-framework-but-you-call-the-controller-the-view-and-the-view-the-template-how-come-you-don-t-use-the-standard-names

В `Django` функции, отвечающие за обработку логики, соответствуют части
`Controller` из MVC, но называются `View`, а отображение соответствует части
`View` из MVC, но называется `Template`. Получилось, что:

* **M -> M** Модели остались неизменными
* **V -> T** Представление назвали `Templates`
* **C -> V** Контроллеры назвали `Views`

Так появилась аббревиатура `MTV`.

.. figure:: /_static/6.www.sync/web/mtv_logo.jpg
   :align: center

   TADA!! Django invented MTV

Вся логика при таком подходе вынесена во `View`, а то, как будут отображаться
данные в `Template`. Из-за ограничений `HTTP` протокола, `View` в `Django`
описывает, **какие данные** будут представленны по запросу на определенный URL.
`View`, как и протокол `HTTP`, не хранит состояний и по факту является обычной
функцией обратного вызова, которая запускается вновь при каждом запросе
по `URL`. `Шаблоны` (`Templates`), в свою очередь, описывают, **как данные**
представить пользователю.

.. figure:: /_static/6.www.sync/web/mtv.*
   :align: center
   :width: 400pt

   Паттерн MTV (Model-Template-View)

MTV фреймворки:

* Django_

RV
--

.. seealso::

   * `RV Pyramid <http://docs.pylonsproject.org/projects/pyramid/en/latest/narr/introduction.html#pyramid-and-other-web-frameworks>`_
   * `Что не так в терминологии MVC <http://docs.pylonsproject.org/projects/pyramid/en/latest/designdefense.html#pyramid-gets-its-terminology-wrong-mvc>`_
   * `Pyramid wikipedia <https://ru.wikipedia.org/wiki/Pyramid_(программный_каркас)>`_

В защиту своего дизайна авторы Pyramid написали довольно большой документ,
который призван развеять мифы о фреймворке. Например, на критику модели `MVC` в
`Pyramid` следует подробное объяснение, что `MVC` «притянут за уши» к
веб-приложениям. Следующая цитата хорошо характеризует подход к терминологии в
`Pyramid`:

.. epigraph::

   «Мы считаем, что есть только две вещи: **ресурсы** (`Resource`) и **виды**
   (`View`). Дерево ресурсов представляет структуру сайта, а вид представляет
   ресурс.

   **"Шаблоны"** (`Template`) в реальности лишь деталь реализации
   некоторого вида: строго говоря, они не обязательны, и вид может вернуть
   ответ (`Response`) и без них.

   Нет никакого **"контроллера"** (`Controller`): его просто не существует.

   **"Модель"** (`Model`) же либо представлена деревом ресурсов, либо "доменной
   моделью" (`domain model`) (например, моделью :l:`SQLAlchemy`), которая
   вообще не является частью каркаса.

   Нам кажется, что наша терминология более разумна при существующих
   ограничениях веб-технологий.»
   
.. figure:: /_static/6.www.sync/web/Pyramid_rv.*
   :align: center
   :width: 600pt

   Паттерн RV (Resources-View)

Веб ограничен `URL`, который и представляет из себя дерево ресурсов или
структуру сайта.

Также протокол `HTTP` не позволяет хранить состояние и
отправлять/принимать оповещения клиенту от сервера, что ограничивает
возможность отслеживания действий клиента для последующего уведомления модели
на изменение состояния.

Поэтому данные часто используются на "frontend"-е
(например в связке `React/Redux`), а на стороне сервера формируются только один
раз во время ответа, либо загружаются отдельным запросом при помощи `AJAX`, или
даже с помощью других протоколов, например `WebSocket`.

RV фреймворки:

* `Pyramid <http://www.pylonsproject.com/>`_


Пример MVC блога
----------------

Структура файлов
^^^^^^^^^^^^^^^^

Приведем структуру нашего блога к следующему виду:

.. code-block:: bash

   .
   ├── __init__.py
   ├── models.py
   └── views.py

   0 directories, 3 files

.. note::

   Исходный код доступен по адресу:

   * `<https://github.com/iitwebdev/lectures_wsgi_example/tree/master/1.mvc>`_

Где:

* ``__init__.py`` - входная точка программы, которая содержит основные
  настройки и запуск Веб-сервера
* ``models.py`` - код, который представляет данные, обычно называется `модели`
* ``views.py`` - логика программы (в нашем случае `WSGI-приложения`)

.. warning::

   Примеры работают только в Python3

Данные
^^^^^^

``models.py``:

.. literalinclude:: /../examples/wsgi/1.mvc/models.py
   :language: python
   :linenos:

Авторизация
^^^^^^^^^^^

Мы использовали самописные `WSGI-middleware`, которые решают стандартные
задачи. Заменим их на уже существующие:

* `selector <https://github.com/lukearno/selector>`_ - URL-диспетчеризация
* `wsgi-basic-auth <https://github.com/mvantellingen/wsgi-basic-auth>`_ -
  авторизация по методу `Basic Auth`

Настройки авторизации ``__init__.py``:

.. literalinclude:: /../examples/wsgi/1.mvc/__init__.py
   :language: python
   :emphasize-lines: 2, 12-15, 21, 23, 24
   :linenos:

URL-диспетчеризация
^^^^^^^^^^^^^^^^^^^

Настройки URL-диспетчеризации ``__init__.py``:

.. literalinclude:: /../examples/wsgi/1.mvc/__init__.py
   :language: python
   :emphasize-lines: 5, 18-24
   :linenos:

`WSGI-приложение` можно указывать как объект (``BlogRead``) или как строку
импорта (``"views.BlogIndex"``).

``views.py``:

.. literalinclude:: /../examples/wsgi/1.mvc/views.py
   :language: python
   :emphasize-lines: 5
   :pyobject: BaseArticle
   :linenos:

`urlrelay` добавляет результат поиска в переменную с названием ``wsgiorg.routing_args``.


.. links

.. |rails| replace:: Ruby on Rails
.. _rails: http://rubyonrails.org/
.. _Django: https://www.djangoproject.com/

WSGI-приложения
^^^^^^^^^^^^^^^

Практически не изменились.

``views.py``:

.. literalinclude:: /../examples/wsgi/1.mvc/views.py
   :language: python
   :emphasize-lines: 1, 15
   :linenos:
