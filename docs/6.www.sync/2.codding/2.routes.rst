.. _wsgi_route:

Маршруты
========

.. seealso::

   * http://restas.lisper.ru/ru/manual/routes.html
   * `Ryby on Rails -> Routes <http://guides.rubyonrails.org/routing.html>`_
   * `Python -> Routes <https://routes.readthedocs.org/en/latest/>`_
   * `<https://ru.wikipedia.org/wiki/ЧПУ_(Интернет)>`_

.. figure:: /_static/6.www.sync/web/routes4.jpg
   :align: left
   :width: 300pt
   :figwidth: 20em

   Сортировочная станция

Идея маршрута (англ. - route) впервые появилась в |rails|_ и быстро обрела популярность в других веб-фреймворках. Также, концептуально очень близкой системой, является `URLConf <http://docs.djangoproject.com/en/dev/topics/http/urls/>`_ в `Django <http://www.djangoproject.com/>`_. В последующих разработках наиболее мощной реализацией данной идеи, вероятно, является http://routes.groovie.org/, используемая в `Pylons <http://docs.pylonsproject.org/en/latest/>`_.

Маршруты отвечают за ключевую проблему веб-разработки: сопоставление кода и URL. Например, какой код должен отвечать за обработку запросов по адресу `"/2008/01/08"` или `"/login"`? Во многих фреймворках используется фиксированная система диспетчеризации, например "/A/B/C" означает прочитать файл "C" в каталоге "B" (например ``/auth/login.php`` или ``/cgi-bin/hello.cgi``), или вызвать метод "С" класса "B" в модуле "A". Это работает прекрасно до тех пор, пока не возникает необходимости в реорганизации кода, и выясняется, что закладки пользователей стали недействительны. Кроме того, если вы хотите переделать адреса (например, создать раздел в подразделе), то нужно изменить уже отлаженную логику по генерации ссылок внутри сайта.

Маршруты предлагают иной подход. Вы определяете шаблоны URL и связываете их со своим кодом. Если вы измените свое решение по поводу конкретного URL, то просто поменяйте шаблон URL - код по-прежнему будет работать отлично и не понадобится менять какую-либо логику.

.. only:: not latex

   .. raw:: html

      <br clear="both"/>

Сопоставление с образом
-----------------------

.. seealso::

   * `Сопоставление с образом <https://ru.wikipedia.org/wiki/Сопоставление_с_образцом>`_
   * `Python -> Selector <https://github.com/lukearno/selector>`_

`Регулярные выражения` дают огромные возможности для обработки URL-путей, но из-за ограничений описанных в стандарте `RFC 1738 <https://tools.ietf.org/html/rfc1738>`_, большинство из них не нужны, при этом использование `регулярных выражений` затрудняет читабельность кода. Более современный подход, придуманный |rails|_, использовать технологию `сопостовление с образом`. Рассмотрим отличия, на примере нашего блога:

.. note::

   Исходный код доступен по адресу:

   * :src:`6.www.sync/2.codding/2.routes`

.. literalinclude:: /../sourcecode/6.www.sync/2.codding/2.routes/__init__.py
   :language: python
   :emphasize-lines: 14, 29-35
   :linenos:

.. tabularcolumns:: |p{6.5cm}|p{6.5cm}|
.. list-table:: Сравнение URL
   :header-rows: 1

   * - Регулярные выражения
     - Сопоставление с образом
   * - \/
     - \/
   * - /article/add
     - /article/add
   * - ^/article/(?P<id>\d+)/$
     - /article/{id:digits}
   * - ^/article/(?P<id>\d+)/edit$
     - /article/{id:digits}/edit
   * - ^/article/(?P<id>\d+)/delete$
     - /article/{id:digits}/delete

.. links
.. |rails| replace:: Ruby on Rails
.. _rails: http://rubyonrails.org/
