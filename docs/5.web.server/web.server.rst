Что такое Веб-сервер
====================

.. seealso::

    * https://developer.mozilla.org/en-US/Learn/What_is_a_web_server
    * `<https://ru.wikipedia.org/wiki/Веб-сервер>`_
    * https://docs.python.org/3.5/howto/webservers.html
    * https://gist.github.com/willurd/5720255

Описание
--------

Понятие `Веб-сервер` может относиться как к железу, так и к программному обеспечению (ПО).

#. С точки зрения железа `Веб-сервер` — это компьютер, который хранит ресурсы сайта
   (HTML документы, CSS стили, JavaScript файлы и другое) и доставляет
   их на устройство конечного пользователя (веб-браузер и т.д.). Обычно
   подключен к сети Интернет и может быть доступен через доменное имя, например,
   mozilla.org.
#. С точки зрения ПО `Веб-сервер` включает в себя некоторые вещи, которые контролируют
   доступ Веб-пользователей к размещенным на сервере файлам, это минимум
   `HTTP сервера`. `HTTP сервер` это часть ПО, которая понимает URL'ы (веб-адреса) и
   HTTP (протокол который использует ваш браузер для просмотра веб-станиц).

Простыми словами, когда браузеру нужен файл, размещенный на веб-сервере,
браузер запрашивает его через HTTP. Когда запрос достигает нужного веб-сервера (железо),
сервер HTTP (ПО) передает запрашиваемый документ обратно, также через HTTP.

.. figure:: /_static/5.web.server/web-server.*
   :align: center
   :width: 550pt

.. seealso::

   * `<https://ru.wikipedia.org/wiki/Статический_сайт>`_
   * `<https://ru.wikipedia.org/wiki/Динамический_сайт>`_
   * `<https://ru.wikipedia.org/wiki/Сервер_приложений>`_

Чтобы опубликовать веб-сайт, нужен либо статический, либо динамический веб-сервер.

**Статический веб-сервер** или стек состоит из компьютера (железо) с сервером HTTP (ПО).
Мы называем это "статикой", потому что сервер посылает размещенные на нем файлы в браузер
"как есть".

**Динамических веб-сервер** состоит из **статического веб-сервера** плюс дополнительного
программного обеспечения, наиболее часто **сервером приложений** и **базы данных**.
Мы называем его "динамический", потому что **сервер приложений** изменяет исходные
файлы перед отправкой в ваш браузер по HTTP.

.. note:: Сервера приложений для Python

   * CherryPy
   * Gunicorn
   * uWSGI
   * Waitress
   * Tornado
   * :l:`Zope`
   * Werkzeug

Например, для получения итоговой страницы, которую вы видите в браузере,
сервер приложений может заполнить HTML шаблон данными из базы данных. Такие сайты, как
MDN (Mozilla Developer Network) или Википедия состоят из тысяч веб-страниц, но они
не являются реальными HTML документами, лишь несколько HTML шаблонов и гигантские
базы данных. Эта структура упрощает и ускоряет сопровождение веб-приложений и доставку
контента.

Более детально
--------------

Чтобы загрузить веб-страницу, как мы уже говорили, ваш браузер отправляет запрос к
веб-серверу, который приступает к поиску запрашиваемого файла в своем собственном
пространстве памяти. Найдя файл, сервер считывает его, обрабатывает как ему это необходимо,
и направляет его в браузер. Давайте посмотрим на эти шаги более подробно.

Хостинг файлов
~~~~~~~~~~~~~~

Во-первых, веб-сервер хранит файлы веб-сайта, а именно все HTML документы и связанные
с ними ресурсы, включая изображения, CSS стили, JavaScript файлы, шрифты и видео.

.. seealso::

    * `<https://ru.wikipedia.org/wiki/Выделенный_сервер>`_
    * `Статический IP адрес <https://ru.wikipedia.org/wiki/IP-адрес#.D0.A1.D1.82.D0.B0.D1.82.D0.B8.D1.87.D0.B5.D1.81.D0.BA.D0.B8.D0.B5_.28.D1.81.D1.82.D0.B0.D1.82.D0.B8.D1.87.D0.BD.D1.8B.D0.B5.29_.D0.B8_.D0.B4.D0.B8.D0.BD.D0.B0.D0.BC.D0.B8.D1.87.D0.B5.D1.81.D0.BA.D0.B8.D0.B5_IP-.D0.B0.D0.B4.D1.80.D0.B5.D1.81.D0.B0>`_

Технически, вы можете разместить все эти файлы на своем компьютере, но гораздо
удобнее хранить их на выделенном веб-сервере, который:

* всегда запущен и работает
* постоянно в сети Интернет
* имеет один и тот же IP адрес все время (не все провайдеры предоставляют статический IP адрес
  для домашнего подключения)
* обслуживается на стороне

По всем этим причинам поиск хорошего хостинг-провайдера является ключевой частью создания
вашего сайта. Рассмотрите различные предложения компаний и выберите то, что соответствует
вашим потребностям и бюджету (предложения варьируются от бесплатных до тысяч долларов в
месяц).

Связь по HTTP
~~~~~~~~~~~~~

Во-вторых, веб-сервер обеспечивает поддержку HTTP (hypertext transfer protocol).
Как следует из названия, HTTP указывает, как передавать гипертекст
(т.е. связанные веб-документы) между двумя компьютерами.

Протокол представляет собой набор правил для связи между двумя компьютерами.
HTTP является текстовым протоколом без сохранения состояния.

**Текстовый**

    Все команды это человеко-читаемый текст.

**Не сохраняет состояние**

    Ни клиент, ни сервер, не помнят о предыдущих соединениях. Например, опираясь только на HTTP, сервер не сможет вспомнить введенный вами пароль, или на каком шаге транзакции вы находитесь. Для таких задач вам потребуется сервер приложений.

HTTP задает строгие правила, как клиент и сервер должны общаться. Более подробно смотри
:ref:`http-protocol`. Вот некоторые из них:

.. note::

    * `<https://ru.wikipedia.org/wiki/File_(схема_URI)>`_

* Только клиенты могут отправлять HTTP запросы, и только на сервера. Сервера отвечают
  только на HTTP запросы клиента.
* Когда запрашивается физический файл, клиент должен сформировать file URL
  (`file:///var/log/syslog`)
* Веб-сервер должен ответить на каждый HTTP запрос, по крайней мере с сообщением об ошибке.

На веб-сервере, HTTP сервер отвечает за обработку входящих запросов и ответ на них.

.. figure:: /_static/5.web.server/mdn-404.png
   :width: 450pt
   :target: https://developer.mozilla.org/en-US/404

#. При получении запроса, HTTP сервер сначала проверяет существует ли ресурс по
   данному URL.
#. Если это так, веб-сервер отправляет содержимое файла обратно в браузер.
   Если нет, сервер приложений создает необходимый ресурс.
#. Если это не возможно, веб-сервер возвращает сообщение об ошибке в браузер,
   чаще всего "404 Not Found". (Эта ошибка настолько распространена, что многие
   веб-дизайнеры тратят большое количество времени на разработку 404 страниц об ошибках.)

Статика vs Динамика
-------------------

Грубо говоря, сервер может отдавать статическое или динамическое содержимое.

**"Статическое"** означает "отдается как есть". Статические веб-сайты проще всего
установить, поэтому мы предлагаем вам сделать свой первый сайт статическим.

**"Динамическое"** означает, что сервер обрабатывает данные или даже генерирует их на
лету из базы данных. Это обеспечивает больше гибкости, но технически сложнее в
обслуживании,
что делает его более сложным для создания веб-сайта.

Возьмем к примеру страницу
`What is web server <https://developer.mozilla.org/en-US/Learn/What_is_a_web_server>`_,
перевод которой вы читаете. На веб-сервере, где это хостится, есть сервер приложений,
который извлекает содержимое статьи из базы данных, форматирует его, добавляет в HTML
шаблоны и отправляет вам результат. В нашем случае, сервер приложений называется `Kuma`,
написан он на языке программирования `Python` (используя фреймворк `Django`). Команда
Mozilla создали `Kuma` для конкретных нужд MDN, но есть много подобных приложений,
построенных на многих других технологий.

Существует так много серверов приложений, что довольно трудно предложить какой-то один.
Некоторые серверы приложений удовлетворяют определенной категории веб-сайтов,
такие как блоги, вики или интернет-магазины; другие, называемые CMS
(системы управления контентом), являются более общими. Если вы создаете динамический сайт,
потратьте немного времени на выбор инструмента, который соответствует вашим потребностям.
Если вы не хотите изучать веб-программирование (хотя это захватывающая область сама по
себе!), то вам не нужно создавать свой собственный сервер приложений. Это будет очередной
велосипед.
