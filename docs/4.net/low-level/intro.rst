Введение
========

IP
--

.. seealso::

    * `<https://ru.wikipedia.org/wiki/IP-адрес>`_

IP-адрес (айпи-адрес, сокращение от англ. Internet Protocol Address) — это уникальный сетевой адрес узла в компьютерной сети, построенной по протоколу IP. В сети Интернет требуется глобальная уникальность адреса; в случае работы в локальной сети требуется уникальность адреса в пределах сети. В версии протокола IPv4 IP-адрес имеет длину 4 байта, в IPv6 — 16 байт.

| Для сети класса A...
| (один байт - поле сети, следующие за ним - номер хоста)
|
|         10.0.0.0 адрес сети класса A, потому что все биты адреса узла равны 0
|         10.0.1.0 адрес узла этой сети
|         10.255.255.255 широковещательный адрес этой сети, потому что все биты адреса
|                        узла равны 1
|
| Для сети класса B...
| (два байта - поле сети, следующие за ним - номер хоста)
|
|         172.17.0.0 адрес сети класса B
|         172.17.0.1 адрес узла этой сети
|         172.17.255.255 широковещательный адрес этой сети
|
| Для сети класса C...
| (три байта - поле сети, следующие за ним - номер хоста)
|
|         192.168.3.0 адрес сети класса C
|         192.168.3.42 адрес узла этой сети
|         192.168.3.255 широковещательный адрес этой сети

Порт
----

.. seealso::

    * http://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.xhtml
    * `Wiki Порт <https://ru.wikipedia.org/wiki/Порт_(компьютерные_сети)>`_


Номер порта является 16-разрядным целым двоичным числом, таким образом, порты возможны в диапазоне от 1 до 65535 (для TCP, номер порта 0 зарезервирован и не может быть использован). Для UDP порт источника не является обязательным и нулевое значение означает отсутствие порта.

* FTP: 21 для команд, 20 для данных
* SSH: 22 — удалённое управление хостом с ОС UNIX/Linux/BSD (если разрешено)
* telnet: 23 — подключение для удалённого управления сетевыми устройствами (если такой сервис поддерживается)
* SMTP: 25
* SMTP c SSL: 465, 587
* DNS: 53 (UDP) — необходимо для работы большинства служб Интернета на ПК обычного пользователя
* DHCP: 67, 68/UDP
* TFTP: 69/UDP
* HTTP: 80, 8080 — если закрыть, браузер не будет отображать страницы

.. code-block:: bash

    $ cat /etc/services

.. code-block:: bash

    $ getent services http
    http                  80/tcp www

.. code-block:: python

   import socket
   socket.getservbyname('http')  # 80

Сокет
-----

.. seealso::

    * http://citforum.ru/internet/articles/art_12.shtml
    * `<https://ru.wikipedia.org/wiki/Сокет_(программный_интерфейс)>`_
    * `<https://ru.wikipedia.org/wiki/Сокеты_Беркли>`_
    * `<https://ru.wikipedia.org/wiki/Сокет_домена_UNIX>`_


Для обеспечения сетевых коммуникаций используются сокеты. Сокет это конечная точка сетевых коммуникаций. Каждый использующийся сокет имеет тип и ассоциированный с ним процесс. Сокеты существуют внутри коммуникационных доменов. Домены это абстракции, которые подразумевают конкретную структуру адресации и множество протоколов, которое определяет различные типы сокетов внутри домена. Примерами коммуникационных доменов могут быть: UNIX домен, Internet домен, и т.д.

Обычно клиент явно подсоединяется к слушателю, после чего любое чтение или запись через его файловый дескриптор будут передавать данные между ним и сервером.

Файловый дескриптор
-------------------

.. seealso::

    * `<https://ru.wikipedia.org/wiki/Файловый_дескриптор>`_

В программе сокет идентифицируется дескриптором - это просто переменная типа int. Программа получает дескриптор от операционной системы при создании сокета, а затем передает его сервисам socket API для указания сокета, над которым необходимо выполнить то или иное действие.

Файловая система UNIX
---------------------
