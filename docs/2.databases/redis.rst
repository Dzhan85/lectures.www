Redis
=====

.. seealso::
  * https://ru.wikipedia.org/wiki/Redis
  * http://eax.me/redis/
  * http://redis.io/

Redis (REmote DIctionary Server) - это нереляционная высокопроизводительная СУБД.

Redis работает на большинстве POSIX систем. Официальной поддержки для сборок Windows нет.

Особенности
-----------

Redis умеет сохранять данные на диск. Можно настроить Redis так, чтобы данные вообще не сохранялись, сохранялись периодически по принципу copy-on-write, или сохранялись периодически и писались в журнал (binlog). Таким образом, всегда можно добиться требуемого баланса между производительностью и надежностью.

В основе своей использует записи вида **ключ-значение**. Ключи бинарнобезопасны. Это значит, что в качесте ключа может быть использована любая бинарная последовательность, полученная хоть из сроки, хоть из JPG-картинки. Максимальный размер ключа - 512 MB.

.. todo:: вставить схему ключ-значения

Значения бывают нескольких типов:

* Строки (strings). Как и "ключи" - бинарнобезопасны, но, в отличии от них, не ограничены в размере.
* Списки (lists). Классические списки строк, упорядоченные в порядке вставки, которая возможна как со стороны головы, так и со стороны хвоста списка.
* Множества(sets). Множества строк в математическом понимании: не упорядочены, поддерживают операции вставки, проверки вхождения элемента, пересечения и разницы множеств.
* Упорядоченные множества(sorted sets). Упорядоченное множество отличается от обычного тем, что его элементы упорядочены по особому параметру "score". Позволяет выбирать группы значений из множества. Например, 10 сверху. В последней версии добавлена возможность лексических упорядоченных множеств строк, у которых поле score одинаковое.

  .. todo:: вставить схему о лексических выборках в Redis

* Хеш-таблицы(hashes). Классические хеш-таблицы или ассоциативные массивы.
* Массивы бит (bitmaps). Для работы с битами.
* HyperLogLogs. Тип данных для подсчёта количества уникальных элементов в множестве.

  .. todo:: вставить схему о HyperLogLogs в Redis

Позволяет хранить не только строки, но и массивы (которые могут использоваться в качестве очередей или стеков), словари, множества без повторов, , а также множества, отсортированные по некой величине. Разумеется, можно работать с отдельными элементами списков, словарей и множеств. Присутствует возможность указать время жизни данных (двумя способами - "удалить тогда-то" и "удалить через ...").

Интересная особенность Redis заключается в том, что это - однопоточный сервер. Такое решение сильно упрощает поддержку кода, обеспечивает атомарность операций и позволяет запустить по одному процессу Redis на каждое ядро процессора. Разумеется, каждый процесс будет прослушивать свой порт.

В Redis есть репликация. Репликация с несколькими главными серверами не поддерживается. Каждый подчиненный сервер может выступать в роли главного для других. Репликация в Redis не приводит к блокировкам ни на главном сервере, ни на подчиненных. На репликах разрешена операция записи. Когда главный и подчиненный сервер восстанавливают соединение после разрыва, происходит полная синхронизация (resync).

Также Redis поддерживает транзакции (будут последовательно выполнены либо все операции, либо ни одной) и пакетную обработку команд (выполняем пачку команд, затем получаем пачку результатов). Притом ничто не мешает использовать их совместно.

С версии 2.6.0 добавлена поддержка Lua, позволяющего выполнять запросы на сервере. Lua позволяет атомарно совершить произвольную обработку данных на сервере и предназначена для использования в случае, когда нельзя достичь того же результата с использованием стандартных команд.

Еще одна особенность Redis - поддержка механизма publish/subscribe. С его помощью приложения могут создавать каналы, подписываться на них и помещать в каналы сообщения, которые будут получены всеми подписчиками. Что-то вроде IRC-чата.
