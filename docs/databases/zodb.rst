ZODB
====

.. seealso::

  * http://www.zodb.org/


ZODB - объектно-ориентированная база данных для Python-объектов.

ZODB используется в Zope, Plone, Zenoss, ERP5 и некоторых других системах. Например, ZODB и ZEO (без Zope) используются в системе Indico — программном обеспечении для организации симпозиумов, конференций, лекций и т. п., разработанном и используемом ЦЕРНом.

На данный момент реализована полностью на Python [1]_. Но в зависимостях используется BTrees, который реализован с использованием языка C.

Конкурентный доступ
-------------------

Изначально является базой данных доступной только для одного процесса. Но данное ограничение обходится с помощью ZEO (Zope Enterprise Objects). Данная технология подменяет стандартное файловое хранилище ZODB на клиент-серверное. "Клиент" не записывает данные на диск, а передаёт их для этого на "сервер", который уже и реализует логику записи. Клиентов может быть несколько, благодаря чему и достигается возможность одновременной работы с одним хранилищем.

Существует ещё один способ конкурентного доступа к данным в ZODB: реализация хранилища в реляционных базах данных [2]_. При таком способе множественный доступ реализуется самой РСУБД стандартными для неё методами через управление подключениями.

Особенности
-----------

ZODB является иерархической базой данных. Корневой элемент создаётся при старте базы данных. Структура предсавляет собой сериализованный (pickle) словарь объектов языка Python. Для записи объекта в храниоище достаточно, чтобы он мог быть сериализован методом стандартной библиотеки Python'а.

Полностью поддерживается механизм транзакций и ACID [3]_. Также присутствует поддержка точек сохранения. Это когда в кеш сохраняется часть большой транзакции для освобождения ресурсов. Присутствует сохранение истории изменений и их отмена.

Для хранения Blob-данных (таких как изображения, например) используется специальный тип хранилища. В нём отсутствует реализация мехонизмов версионирования данных. За счёт чего эти данные не оказывают критического влияния на быстродействие системы хранения.

Для востребованных данных существует кеширование в памяти. Этот кеш динамически изменяется в зависимости от нужды в объектах: неиспользуемые объекты автоматически удаляются из него.

Для объектов в базе применяется версионирование, что может значительным образом увеличить размер хранилища.
Для сокращения объёма хранилища и удаления неиспользуемых версий объектов используется метод packing. Его рекомендуется применять по расписанию, т.к. удалённые объекты также остаются в хранилище. Это аналог команды VACUUM из Postgresql.

Примечания
----------

.. [1] https://github.com/zopefoundation/ZODB
.. [2] https://github.com/zodb/relstorage
.. [3] `Atomicity Consistency Isolation Durability <https://ru.wikipedia.org/wiki/ACID>`_
