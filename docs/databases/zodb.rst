ZODB
====

.. seealso::

  * http://www.zodb.org/


ZODB - объектно-ориентированная база данных для Python-объектов.

ZODB используется в Zope, Plone, Zenoss, ERP5 и некоторых других системах. Например, ZODB и ZEO (без Zope) используются в системе Indico — программном обеспечении для организации симпозиумов, конференций, лекций и т. п., разработанном и используемом ЦЕРНом.

На данный момент реализована полностью на Python [1]_. Но в зависимостях используется BTrees, который реализован с использованием языка C.

Конкурентный доступ
-------------------

Изначально является базой данных доступной только для одного процесса. Но данное ограничение обходится с помощью ZEO (Zope Enterprise Objects). Данная технология подменяет стандартное файловое хранилище ZODB на клиент-серверное. "Клиент" не записывает данные на диск, а передаёт их для этого на "сервер", который уже и реализует логику записи. Клиентов может быть несколько, благодаря чему и достигается возможность одновременной работы с одним хранилищем.

TODO: Вставить схему ZEO

Существует ещё один способ конкурентного доступа к данным в ZODB: реализация хранилища в реляционных базах данных [2]_. При таком способе множественный доступ реализуется самой РСУБД стандартными для неё методами через управление подключениями.

Особенности
-----------

ZODB является иерархической базой данных. Корневой элемент создаётся при старте базы данных. Структура предсавляет собой словарь сериализованных (pickle) объектов языка Python. Для записи объекта в храниоище достаточно, чтобы он мог быть сериализован методом стандартной библиотеки Python'а.

TODO: Вставить схему обхода словаря

Для оптимизации хранения древовидных структур применяется встроенный модуль OOBTree реализованный на языке C.
Но для его эффективной работы неопходимо ручное поддержание структуры дерева.

Полностью поддерживается механизм транзакций и ACID [3]_. Также присутствует поддержка точек сохранения. Это когда в кеш сохраняется часть большой транзакции для освобождения ресурсов. Присутствует сохранение истории изменений и их отмена.

Для хранения Blob-данных (таких как изображения, например) используется специальный тип хранилища. В нём отсутствует реализация мехонизмов версионирования данных. За счёт чего эти данные не оказывают критического влияния на быстродействие системы хранения.

Для востребованных данных существует кеширование в памяти. Этот кеш динамически изменяется в зависимости от нужды в объектах: неиспользуемые объекты автоматически удаляются из него.

Для объектов в базе применяется версионирование, что может значительным образом увеличить размер хранилища.
Для сокращения объёма хранилища и удаления неиспользуемых версий объектов используется метод packing. Его рекомендуется применять по расписанию, т.к. удалённые объекты также остаются в хранилище. Это аналог команды VACUUM из Postgresql.

Заключение
----------

В заключение хочется сказать, что аналоги ZODB присутствуют во многих языках программирования. Например, в Ruby это PStore, в Java - ObjectDB.

Также необходимо упомянуть главные недостатки ZODB:

* Отсутствие встроенных механизмов сложных индексов. В ZODB нет таких мощных механизмов создания индексов как в реляционных СУБД. Она использует перебор словаря для нахождения нужных значений. Что накладывает серьёзные ограничения на реализацию поиска по сложным критериям.
* Отсутствие удобного доступа к данным из приложений реализованных не на Python. В случае реализации какого-либо сложного проекта на базе ZODB, придётся реализовавыть API для доступа к данным, хранящимся в ней, для тех программ, которые выполнены не на Python. Что не всегда возможно.

Но для тех областей, где не так важны индексы, а, наоборот, мешают ограничения реляционного подхода ZODB может оказаться удачным вариантом.

Примером такого проекта может являться задача учёта структуры сети интернет-провайдера.

Практика
--------

Для сегодняшней практической части мы возьмём задачу, которая релаьно была поставлена одному моему коллеге на одной из его прошлых работ.

Постановка задачи
^^^^^^^^^^^^^^^^^

Необходимо создать систему учёта структуры сети интернет-провайдера. У этой компании имеется большое число коммутаторов, объединённых в некий граф.

TODO: Вставить схему сети

Большинство этих коммутаторов довольно разные:
* разные типы возможных подключений для настройки / администрирования. Кто-то позволяет подключаться только по telnet, кто-то только по ssh / http и т.д.;
* разные типы дополнительных портов: оптические, коаксиальные;
* ещё какие-либо важные особенности.

Связаны эти коммутаторы по определённым портам. Вот эти связи и являются наиболее важным элементов в создаваемой нами системе: нельзя чтобы система позволяла связать два коммутатора между собой по одним и тем же портам дважды. В реляцонной СУБД это реализуется через создание промежуточных таблиц и сложных ограничений для их полей.

Но с использованием ZODB для хранения Python объектов задача намного упрощается. Т.к. позволяет воспользоваться структурами данных этого языка программирования для выполнения контроля связанных коммутаторов.

Настройка окружения
^^^^^^^^^^^^^^^^^^^


Примечания
----------

.. [1] https://github.com/zopefoundation/ZODB
.. [2] https://github.com/zodb/relstorage
.. [3] `Atomicity Consistency Isolation Durability <https://ru.wikipedia.org/wiki/ACID>`_
