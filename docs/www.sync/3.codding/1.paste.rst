Middlewares
===========

В программном обеспечении принято разделять программную логику, код который
относится к данным, настройки и шаблоны. Таким образом код становится более
структурированным и его легче развивать, а также сопровождать в дальнейшем.

Разделение кода
---------------

Приведем структуру нашего блога к следующему виду:

.. code-block:: bash

   .
   ├── __init__.py
   ├── models.py
   └── views.py

   0 directories, 3 files

.. note:: Исходный код доступен по адрусу:

   * https://github.com/ustu/lectures.www/tree/master/sourcecode/wsgi/blog/1.paster/

Где:

* ``__init__.py`` - входная точка программы, которая содержит основные
  настройки и запуск Веб-сервера
* ``models.py`` - код который представляет данные, обычно называется `модели`
* ``views.py`` - логика программы (в нашем случае `WSGI-приложения`)

Данные
------

``models.py``:

.. literalinclude:: /../sourcecode/wsgi/blog/1.paster/models.py
   :language: python
   :linenos:

Авторизация
-----------

Мы использовали самописные `WSGI-middleware`, которые решают стандартные
задачи. Заменим их на уже существующие:

* `urlrelay <https://pypi.python.org/pypi/urlrelay/>`_ - URL-диспетчеризация
* `paste.auth.basic <http://pythonpaste.org/modules/auth.basic.html#module-paste.auth.basic>`_ - авторизация по методу `Basic Auth`

Настройки авторизации ``__init__.py``:

.. literalinclude:: /../sourcecode/wsgi/blog/1.paster/__init__.py
   :language: python
   :emphasize-lines: 12, 18-19, 24-26
   :linenos:

Для авторизации добавлена отдельная функция проверки `логина`, `пароля` (``authfunc``).

URL-диспетчеризация
-------------------

Настройки URL-диспетчеризации ``__init__.py``:

.. literalinclude:: /../sourcecode/wsgi/blog/1.paster/__init__.py
   :language: python
   :emphasize-lines: 14, 15, 29-34
   :linenos:

`WSGI-приложение` можно указывать как объект (``BlogRead``) или как строку
импорта (``"views.BlogIndex"``).

``views.py``:

.. literalinclude:: /../sourcecode/wsgi/blog/1.paster/views.py
   :language: python
   :emphasize-lines: 5
   :pyobject: BaseArticle
   :linenos:

`urlrelay` добавляет результат поиска в переменную с названием ``wsgiorg.routing_args``.
